{
  "name": "marquee",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "ui/marquee.tsx",
      "content": "\"use client\";\n\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { useComposedRefs } from \"@/lib/compose-refs\";\nimport { cn } from \"@/lib/utils\";\n\ntype Direction = \"left\" | \"right\" | \"up\" | \"down\";\ntype Orientation = \"horizontal\" | \"vertical\";\n\ntype RootElement = React.ComponentRef<typeof MarqueeRoot>;\ntype ContentElement = React.ComponentRef<typeof MarqueeContent>;\n\ninterface DivProps extends React.ComponentProps<\"div\"> {\n  asChild?: boolean;\n}\n\ninterface MarqueeContextValue {\n  direction: Direction;\n  pauseOnHover: boolean;\n  reverse: boolean;\n  orientation: Orientation;\n  loopCount: number;\n  contentRef: React.RefObject<ContentElement | null>;\n}\n\nconst MarqueeContext = React.createContext<MarqueeContextValue | null>(null);\n\nfunction useMarqueeContext() {\n  const context = React.useContext(MarqueeContext);\n  if (!context) {\n    throw new Error(\"Marquee components must be used within a Marquee\");\n  }\n  return context;\n}\n\ninterface MarqueeRootProps extends DivProps {\n  direction?: Direction;\n  orientation?: Orientation;\n  pauseOnHover?: boolean;\n  reverse?: boolean;\n  speed?: number;\n  loopCount?: number;\n}\n\nfunction MarqueeRoot(props: MarqueeRootProps) {\n  const {\n    direction = \"left\",\n    orientation = direction === \"up\" || direction === \"down\"\n      ? \"vertical\"\n      : \"horizontal\",\n    speed = 50,\n    loopCount = 2,\n    pauseOnHover = false,\n    reverse = false,\n    className,\n    style,\n    children,\n    asChild,\n    ref,\n    ...marqueeProps\n  } = props;\n\n  const rootRef = React.useRef<RootElement>(null);\n  const contentRef = React.useRef<ContentElement>(null);\n  const composedRef = useComposedRefs(ref, rootRef);\n  const [duration, setDuration] = React.useState(40);\n\n  React.useEffect(() => {\n    function updateDuration() {\n      if (!rootRef.current || !contentRef.current) return;\n\n      const container = rootRef.current;\n      const firstContent = contentRef.current;\n\n      const containerSize =\n        orientation === \"vertical\"\n          ? container.offsetHeight\n          : container.offsetWidth;\n      const contentSize =\n        orientation === \"vertical\"\n          ? firstContent.offsetHeight\n          : firstContent.offsetWidth;\n\n      const distance = contentSize + containerSize;\n      const calculatedDuration = distance / speed;\n\n      setDuration(calculatedDuration);\n    }\n\n    updateDuration();\n\n    if (typeof ResizeObserver !== \"undefined\") {\n      const resizeObserver = new ResizeObserver(updateDuration);\n      if (rootRef.current) {\n        resizeObserver.observe(rootRef.current);\n      }\n      if (contentRef.current) {\n        resizeObserver.observe(contentRef.current);\n      }\n\n      return () => resizeObserver.disconnect();\n    }\n\n    return undefined;\n  }, [speed, orientation]);\n\n  const marqueeStyle = React.useMemo<React.CSSProperties>(\n    () => ({\n      \"--duration\": `${duration}s`,\n      \"--gap\": \"1rem\",\n      ...style,\n    }),\n    [duration, style],\n  );\n\n  const contextValue = React.useMemo<MarqueeContextValue>(\n    () => ({\n      direction,\n      pauseOnHover,\n      reverse,\n      orientation: orientation ?? \"horizontal\",\n      loopCount,\n      contentRef,\n    }),\n    [direction, pauseOnHover, reverse, orientation, loopCount],\n  );\n\n  const MarqueePrimitive = asChild ? Slot : \"div\";\n\n  return (\n    <MarqueeContext.Provider value={contextValue}>\n      <MarqueePrimitive\n        data-slot=\"marquee\"\n        {...marqueeProps}\n        ref={composedRef}\n        style={marqueeStyle}\n        className={cn(\n          \"relative flex overflow-hidden [--duration:40s] [--gap:1rem]\",\n          orientation === \"vertical\" && \"h-full flex-col\",\n          orientation === \"horizontal\" && \"w-full\",\n          pauseOnHover && \"group\",\n          className,\n        )}\n      >\n        {children}\n      </MarqueePrimitive>\n    </MarqueeContext.Provider>\n  );\n}\n\nconst marqueeContentVariants = cva(\n  \"flex shrink-0 animate-marquee justify-around [gap:var(--gap)]\",\n  {\n    variants: {\n      direction: {\n        left: \"animate-marquee-left [margin-right:var(--gap)]\",\n        right: \"animate-marquee-right [margin-left:var(--gap)]\",\n        up: \"animate-marquee-up flex-col [margin-bottom:var(--gap)]\",\n        down: \"animate-marquee-down flex-col [margin-top:var(--gap)]\",\n      },\n      pauseOnHover: {\n        true: \"group-hover:[animation-play-state:paused]\",\n        false: \"\",\n      },\n      reverse: {\n        true: \"[animation-direction:reverse]\",\n        false: \"\",\n      },\n    },\n    defaultVariants: {\n      direction: \"left\",\n      pauseOnHover: false,\n      reverse: false,\n    },\n  },\n);\n\nfunction MarqueeContent(props: DivProps) {\n  const { className, asChild, ref, ...contentProps } = props;\n  const { direction, pauseOnHover, reverse, loopCount, contentRef } =\n    useMarqueeContext();\n\n  const composedRef = useComposedRefs(ref, contentRef);\n  const ContentPrimitive = asChild ? Slot : \"div\";\n\n  return (\n    <>\n      {Array.from({ length: loopCount }).map((_, index) => (\n        <ContentPrimitive\n          key={index}\n          data-slot=\"marquee-content\"\n          {...contentProps}\n          ref={index === 0 ? composedRef : undefined}\n          className={cn(\n            marqueeContentVariants({\n              direction,\n              pauseOnHover,\n              reverse,\n              className,\n            }),\n          )}\n        />\n      ))}\n    </>\n  );\n}\n\nfunction MarqueeItem(props: DivProps) {\n  const { className, asChild, ...itemProps } = props;\n\n  const ItemPrimitive = asChild ? Slot : \"div\";\n\n  return (\n    <ItemPrimitive\n      data-slot=\"marquee-item\"\n      {...itemProps}\n      className={cn(\"shrink-0\", className)}\n    />\n  );\n}\n\nconst marqueeFadeVariants = cva(\"pointer-events-none absolute z-10\", {\n  variants: {\n    side: {\n      left: \"top-0 left-0 h-full w-1/3 bg-gradient-to-r from-background to-transparent\",\n      right:\n        \"top-0 right-0 h-full w-1/3 bg-gradient-to-l from-background to-transparent\",\n      top: \"top-0 left-0 h-1/3 w-full bg-gradient-to-b from-background to-transparent\",\n      bottom:\n        \"bottom-0 left-0 h-1/3 w-full bg-gradient-to-t from-background to-transparent\",\n    },\n  },\n});\n\ninterface MarqueeFadeProps\n  extends VariantProps<typeof marqueeFadeVariants>,\n    DivProps {}\n\nfunction MarqueeFade(props: MarqueeFadeProps) {\n  const { side, className, asChild, ...fadeProps } = props;\n\n  const FadePrimitive = asChild ? Slot : \"div\";\n\n  return (\n    <FadePrimitive\n      data-slot=\"marquee-fade\"\n      {...fadeProps}\n      className={cn(marqueeFadeVariants({ side, className }))}\n    />\n  );\n}\n\nexport {\n  MarqueeRoot as Root,\n  MarqueeContent as Content,\n  MarqueeItem as Item,\n  MarqueeFade as Fade,\n  //\n  MarqueeRoot as Marquee,\n  MarqueeContent,\n  MarqueeItem,\n  MarqueeFade,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib/compose-refs.ts",
      "content": "import * as React from \"react\";\n\ntype PossibleRef<T> = React.Ref<T> | undefined;\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction setRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === \"function\") {\n    return ref(value);\n  }\n\n  if (ref !== null && ref !== undefined) {\n    ref.current = value;\n  }\n}\n\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction composeRefs<T>(...refs: PossibleRef<T>[]): React.RefCallback<T> {\n  return (node) => {\n    let hasCleanup = false;\n    const cleanups = refs.map((ref) => {\n      const cleanup = setRef(ref, node);\n      if (!hasCleanup && typeof cleanup === \"function\") {\n        hasCleanup = true;\n      }\n      return cleanup;\n    });\n\n    // React <19 will log an error to the console if a callback ref returns a\n    // value. We don't use ref cleanups internally so this will only happen if a\n    // user's ref callback returns a value, which we only expect if they are\n    // using the cleanup functionality added in React 19.\n    if (hasCleanup) {\n      return () => {\n        for (let i = 0; i < cleanups.length; i++) {\n          const cleanup = cleanups[i];\n          if (typeof cleanup === \"function\") {\n            cleanup();\n          } else {\n            setRef(refs[i], null);\n          }\n        }\n      };\n    }\n  };\n}\n\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction useComposedRefs<T>(...refs: PossibleRef<T>[]): React.RefCallback<T> {\n  // biome-ignore lint/correctness/useExhaustiveDependencies: we want to memoize by all values\n  return React.useCallback(composeRefs(...refs), refs);\n}\n\nexport { composeRefs, useComposedRefs };\n",
      "type": "registry:lib",
      "target": ""
    }
  ],
  "cssVars": {
    "theme": {
      "--animate-marquee-left": "marquee-left var(--duration) linear infinite",
      "--animate-marquee-right": "marquee-right var(--duration) linear infinite",
      "--animate-marquee-up": "marquee-up var(--duration) linear infinite",
      "--animate-marquee-down": "marquee-down var(--duration) linear infinite"
    }
  },
  "css": {
    "@keyframes marquee-left": {
      "0%": {
        "transform": "translateX(0%)"
      },
      "100%": {
        "transform": "translateX(-100%)"
      }
    },
    "@keyframes marquee-right": {
      "0%": {
        "transform": "translateX(-100%)"
      },
      "100%": {
        "transform": "translateX(0%)"
      }
    },
    "@keyframes marquee-up": {
      "0%": {
        "transform": "translateY(0%)"
      },
      "100%": {
        "transform": "translateY(-100%)"
      }
    },
    "@keyframes marquee-down": {
      "0%": {
        "transform": "translateY(-100%)"
      },
      "100%": {
        "transform": "translateY(0%)"
      }
    }
  }
}