{
  "name": "color-swatch",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "ui/color-swatch.tsx",
      "content": "\"use client\";\n\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nconst colorSwatchVariants = cva(\n  \"box-border rounded-sm border shadow-sm data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n  {\n    variants: {\n      size: {\n        default: \"size-8\",\n        sm: \"size-6\",\n        lg: \"size-12\",\n      },\n    },\n    defaultVariants: {\n      size: \"default\",\n    },\n  },\n);\n\ninterface ColorSwatchProps\n  extends React.ComponentProps<\"div\">,\n    VariantProps<typeof colorSwatchVariants> {\n  value?: string;\n  asChild?: boolean;\n  disabled?: boolean;\n  withoutTransparency?: boolean;\n}\n\nfunction ColorSwatch(props: ColorSwatchProps) {\n  const {\n    value,\n    size = \"default\",\n    asChild = false,\n    disabled = false,\n    withoutTransparency = false,\n    className,\n    style,\n    ...colorSwatchProps\n  } = props;\n\n  const backgroundStyle = React.useMemo(() => {\n    if (!value) {\n      return {\n        background:\n          \"linear-gradient(to bottom right, transparent calc(50% - 1px), hsl(var(--destructive)) calc(50% - 1px) calc(50% + 1px), transparent calc(50% + 1px)) no-repeat\",\n      };\n    }\n\n    const hasTransparency =\n      value.includes(\"rgba\") ||\n      value.includes(\"hsla\") ||\n      (value.includes(\"rgb\") && value.split(\",\").length === 4) ||\n      (value.includes(\"hsl\") && value.split(\",\").length === 4);\n\n    if (hasTransparency && !withoutTransparency) {\n      return {\n        background: `linear-gradient(${value}, ${value}), repeating-conic-gradient(#ccc 0% 25%, #fff 0% 50%) 0% 50% / 8px 8px`,\n      };\n    }\n\n    return {\n      backgroundColor: value,\n    };\n  }, [value, withoutTransparency]);\n\n  const ariaLabel = !value ? \"No color selected\" : `Color swatch: ${value}`;\n\n  const ColorSwatchPrimitive = asChild ? Slot : \"div\";\n\n  return (\n    <ColorSwatchPrimitive\n      role=\"img\"\n      aria-label={ariaLabel}\n      data-slot=\"color-swatch\"\n      data-disabled={disabled ? \"\" : undefined}\n      {...colorSwatchProps}\n      className={cn(colorSwatchVariants({ size }), className)}\n      style={{\n        ...backgroundStyle,\n        forcedColorAdjust: \"none\",\n        ...style,\n      }}\n    />\n  );\n}\n\nexport { ColorSwatch };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}