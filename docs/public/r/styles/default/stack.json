{
  "name": "stack",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "ui/stack.tsx",
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nconst stackVariants = cva(\"flex items-center\", {\n  variants: {\n    orientation: {\n      horizontal: \"flex-row\",\n      vertical: \"flex-col\",\n    },\n    dir: {\n      ltr: \"\",\n      rtl: \"\",\n    },\n  },\n  compoundVariants: [\n    {\n      orientation: \"horizontal\",\n      dir: \"ltr\",\n      className: \"-space-x-1\",\n    },\n    {\n      orientation: \"horizontal\",\n      dir: \"rtl\",\n      className: \"-space-x-1 flex-row-reverse space-x-reverse\",\n    },\n    {\n      orientation: \"vertical\",\n      dir: \"ltr\",\n      className: \"-space-y-1\",\n    },\n    {\n      orientation: \"vertical\",\n      dir: \"rtl\",\n      className: \"-space-y-1 flex-col-reverse space-y-reverse\",\n    },\n  ],\n  defaultVariants: {\n    orientation: \"horizontal\",\n    dir: \"ltr\",\n  },\n});\n\ninterface StackProps\n  extends Omit<React.ComponentProps<\"div\">, \"dir\">,\n    VariantProps<typeof stackVariants> {\n  size?: number;\n  max?: number;\n  asChild?: boolean;\n  reverse?: boolean;\n}\n\nfunction Stack(props: StackProps) {\n  const {\n    orientation = \"horizontal\",\n    dir = \"ltr\",\n    size = 40,\n    max,\n    asChild,\n    reverse = false,\n    className,\n    children,\n    ...rootProps\n  } = props;\n\n  const childrenArray = React.Children.toArray(children).filter(\n    React.isValidElement,\n  );\n  const itemCount = childrenArray.length;\n  const shouldTruncate = max && itemCount > max;\n  const visibleItems = shouldTruncate\n    ? childrenArray.slice(0, max - 1)\n    : childrenArray;\n  const overflowCount = shouldTruncate ? itemCount - (max - 1) : 0;\n  const totalRenderedItems = shouldTruncate ? max : itemCount;\n\n  const RootPrimitive = asChild ? Slot : \"div\";\n\n  return (\n    <RootPrimitive\n      data-orientation={orientation}\n      data-slot=\"stack\"\n      {...rootProps}\n      className={cn(stackVariants({ orientation, dir }), className)}\n    >\n      {visibleItems.map((child, index) => (\n        <StackItem\n          key={index}\n          child={child}\n          index={index}\n          itemCount={totalRenderedItems}\n          orientation={orientation}\n          dir={dir}\n          size={size}\n          reverse={reverse}\n        />\n      ))}\n      {shouldTruncate && (\n        <StackItem\n          key=\"overflow\"\n          child={\n            <div className=\"flex size-full items-center justify-center rounded-full bg-muted font-medium text-muted-foreground text-xs\">\n              +{overflowCount}\n            </div>\n          }\n          index={visibleItems.length}\n          itemCount={totalRenderedItems}\n          orientation={orientation}\n          dir={dir}\n          size={size}\n          reverse={reverse}\n        />\n      )}\n    </RootPrimitive>\n  );\n}\n\ninterface StackItemProps\n  extends Omit<React.ComponentProps<typeof Slot>, \"dir\">,\n    VariantProps<typeof stackVariants> {\n  child: React.ReactElement;\n  index: number;\n  itemCount: number;\n  size: number;\n  reverse: boolean;\n}\n\nfunction StackItem(props: StackItemProps) {\n  const {\n    child,\n    index,\n    size,\n    orientation,\n    dir = \"ltr\",\n    reverse = false,\n    itemCount,\n    className,\n    style,\n    ...itemProps\n  } = props;\n\n  const maskStyle = React.useMemo<React.CSSProperties>(() => {\n    let maskImage = \"\";\n\n    let shouldMask = false;\n\n    if (orientation === \"vertical\" && dir === \"rtl\" && reverse) {\n      shouldMask = index !== itemCount - 1;\n    } else {\n      shouldMask = reverse ? index < itemCount - 1 : index > 0;\n    }\n\n    if (shouldMask) {\n      const maskRadius = size / 2;\n      const maskOffset = size / 4 + size / 10;\n\n      if (orientation === \"vertical\") {\n        if (dir === \"ltr\") {\n          if (reverse) {\n            maskImage = `radial-gradient(circle ${maskRadius}px at 50% ${size + maskOffset}px, transparent 99%, white 100%)`;\n          } else {\n            maskImage = `radial-gradient(circle ${maskRadius}px at 50% -${maskOffset}px, transparent 99%, white 100%)`;\n          }\n        } else {\n          if (reverse) {\n            maskImage = `radial-gradient(circle ${maskRadius}px at 50% -${maskOffset}px, transparent 99%, white 100%)`;\n          } else {\n            maskImage = `radial-gradient(circle ${maskRadius}px at 50% ${size + maskOffset}px, transparent 99%, white 100%)`;\n          }\n        }\n      } else {\n        if (dir === \"ltr\") {\n          if (reverse) {\n            maskImage = `radial-gradient(circle ${maskRadius}px at ${size + maskOffset}px 50%, transparent 99%, white 100%)`;\n          } else {\n            maskImage = `radial-gradient(circle ${maskRadius}px at -${maskOffset}px 50%, transparent 99%, white 100%)`;\n          }\n        } else {\n          if (reverse) {\n            maskImage = `radial-gradient(circle ${maskRadius}px at -${maskOffset}px 50%, transparent 99%, white 100%)`;\n          } else {\n            maskImage = `radial-gradient(circle ${maskRadius}px at ${size + maskOffset}px 50%, transparent 99%, white 100%)`;\n          }\n        }\n      }\n    }\n\n    return {\n      width: size,\n      height: size,\n      maskImage,\n    };\n  }, [size, index, orientation, dir, reverse, itemCount]);\n\n  return (\n    <Slot\n      data-slot=\"stack-item\"\n      className={cn(\n        \"size-full shrink-0 overflow-hidden rounded-full [&_img]:size-full\",\n        className,\n      )}\n      style={{\n        ...maskStyle,\n        ...style,\n      }}\n      {...itemProps}\n    >\n      {child}\n    </Slot>\n  );\n}\n\nexport { Stack };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}