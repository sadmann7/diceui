{
  "name": "input-group",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "input"
  ],
  "files": [
    {
      "path": "ui/input-group.tsx",
      "content": "\"use client\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { useComposedRefs } from \"../lib/compose-refs\";\n\nconst ROOT_NAME = \"InputGroup\";\nconst ITEM_NAME = \"InputGroupItem\";\n\ntype Direction = \"ltr\" | \"rtl\";\n\nconst DirectionContext = React.createContext<Direction | undefined>(undefined);\n\nfunction useDirection(dirProp?: Direction): Direction {\n  const contextDir = React.useContext(DirectionContext);\n  return dirProp ?? contextDir ?? \"ltr\";\n}\n\ninterface InputGroupContextValue {\n  id: string;\n  rootRef: React.RefObject<HTMLDivElement | null>;\n  dir?: Direction;\n  orientation: \"horizontal\" | \"vertical\";\n  size?: \"sm\" | \"default\" | \"lg\";\n  disabled?: boolean;\n  invalid?: boolean;\n  required?: boolean;\n}\n\nconst InputGroupContext = React.createContext<InputGroupContextValue | null>(\n  null,\n);\nInputGroupContext.displayName = ROOT_NAME;\n\nfunction useInputGroupContext(consumerName: string) {\n  const context = React.useContext(InputGroupContext);\n  if (!context) {\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${ROOT_NAME}\\``);\n  }\n  return context;\n}\n\nconst inputGroupItemVariants = cva(\"\", {\n  variants: {\n    position: {\n      first: \"rounded-e-none\",\n      middle: \"-ms-px rounded-none border-l-0\",\n      last: \"-ms-px rounded-s-none border-l-0\",\n      isolated: \"\",\n    },\n    orientation: {\n      horizontal: \"\",\n      vertical: \"\",\n    },\n  },\n  compoundVariants: [\n    {\n      position: \"first\",\n      orientation: \"vertical\",\n      class: \"rounded-e-md rounded-b-none\",\n    },\n    {\n      position: \"middle\",\n      orientation: \"vertical\",\n      class: \"-mt-px rounded-none border-t-0 border-l-1\",\n    },\n    {\n      position: \"last\",\n      orientation: \"vertical\",\n      class: \"-mt-px rounded-e-md rounded-t-none border-t-0 border-l-1\",\n    },\n  ],\n  defaultVariants: {\n    position: \"isolated\",\n    orientation: \"horizontal\",\n  },\n});\n\ninterface InputGroupRootProps extends React.ComponentProps<\"div\"> {\n  id?: string;\n  dir?: Direction;\n  orientation?: \"horizontal\" | \"vertical\";\n  size?: \"sm\" | \"default\" | \"lg\";\n  asChild?: boolean;\n  disabled?: boolean;\n  invalid?: boolean;\n  required?: boolean;\n}\n\nfunction InputGroupRoot(props: InputGroupRootProps) {\n  const {\n    dir: dirProp,\n    orientation = \"horizontal\",\n    size = \"default\",\n    className,\n    ref,\n    asChild,\n    disabled,\n    invalid,\n    required,\n    ...rootProps\n  } = props;\n\n  const id = React.useId();\n  const dir = useDirection(dirProp);\n\n  const rootRef = React.useRef<HTMLDivElement>(null);\n  const composedRef = useComposedRefs(ref, rootRef);\n\n  const contextValue = React.useMemo<InputGroupContextValue>(\n    () => ({\n      id,\n      rootRef,\n      dir,\n      orientation,\n      size,\n      disabled,\n      invalid,\n      required,\n    }),\n    [id, dir, orientation, size, disabled, invalid, required],\n  );\n\n  const RootPrimitive = asChild ? Slot : \"div\";\n\n  return (\n    <InputGroupContext.Provider value={contextValue}>\n      <RootPrimitive\n        role=\"group\"\n        aria-orientation={orientation}\n        data-slot=\"input-group\"\n        data-orientation={orientation}\n        data-disabled={disabled ? \"\" : undefined}\n        data-invalid={invalid ? \"\" : undefined}\n        data-required={required ? \"\" : undefined}\n        {...rootProps}\n        id={id}\n        ref={composedRef}\n        dir={dir}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"flex-row\" : \"flex-col\",\n          className,\n        )}\n      />\n    </InputGroupContext.Provider>\n  );\n}\nInputGroupRoot.displayName = ROOT_NAME;\n\ninterface InputGroupItemProps\n  extends React.ComponentProps<\"input\">,\n    VariantProps<typeof inputGroupItemVariants> {\n  asChild?: boolean;\n}\n\nfunction InputGroupItem(props: InputGroupItemProps) {\n  const {\n    asChild,\n    className,\n    position,\n    disabled,\n    required,\n    ref,\n    ...inputProps\n  } = props;\n  const context = useInputGroupContext(ITEM_NAME);\n\n  const isDisabled = disabled ?? context.disabled;\n  const isRequired = required ?? context.required;\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      inputProps.onKeyDown?.(event);\n      if (event.defaultPrevented || isDisabled) return;\n\n      const target = event.currentTarget;\n      const root = context.rootRef?.current;\n      if (!root) return;\n\n      const elements = Array.from(\n        root.querySelectorAll(\n          'input[data-slot=\"input-group-item\"]:not([disabled])',\n        ),\n      );\n\n      const inputs = elements.filter(\n        (el): el is HTMLInputElement => el instanceof HTMLInputElement,\n      );\n\n      const currentIndex = inputs.indexOf(target);\n\n      if (currentIndex === -1) return;\n\n      let nextIndex = -1;\n\n      if (context.orientation === \"horizontal\") {\n        if (event.key === \"ArrowLeft\" && currentIndex > 0) {\n          nextIndex = currentIndex - 1;\n        } else if (\n          event.key === \"ArrowRight\" &&\n          currentIndex < inputs.length - 1\n        ) {\n          nextIndex = currentIndex + 1;\n        }\n      } else {\n        if (event.key === \"ArrowUp\" && currentIndex > 0) {\n          nextIndex = currentIndex - 1;\n        } else if (\n          event.key === \"ArrowDown\" &&\n          currentIndex < inputs.length - 1\n        ) {\n          nextIndex = currentIndex + 1;\n        }\n      }\n\n      if (nextIndex !== -1) {\n        event.preventDefault();\n        inputs[nextIndex]?.focus();\n      }\n    },\n    [inputProps.onKeyDown, isDisabled, context.orientation, context.rootRef],\n  );\n\n  const InputPrimitive = asChild ? Slot : Input;\n\n  return (\n    <InputPrimitive\n      data-slot=\"input-group-item\"\n      data-position={position}\n      data-orientation={context.orientation}\n      data-disabled={isDisabled ? \"\" : undefined}\n      data-invalid={context.invalid ? \"\" : undefined}\n      data-required={isRequired ? \"\" : undefined}\n      aria-invalid={context.invalid}\n      aria-required={isRequired}\n      disabled={isDisabled}\n      required={isRequired}\n      {...inputProps}\n      ref={ref}\n      onKeyDown={onKeyDown}\n      className={cn(\n        inputGroupItemVariants({\n          position,\n          orientation: context.orientation,\n        }),\n        className,\n      )}\n    />\n  );\n}\nInputGroupItem.displayName = ITEM_NAME;\n\nexport {\n  InputGroupRoot as InputGroup,\n  InputGroupItem,\n  //\n  InputGroupRoot as Root,\n  InputGroupItem as Item,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}