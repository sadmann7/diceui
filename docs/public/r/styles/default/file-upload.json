{
  "name": "file-upload",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot",
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui/file-upload.tsx",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport {\r\n  FileArchiveIcon,\r\n  FileAudioIcon,\r\n  FileCodeIcon,\r\n  FileCogIcon,\r\n  FileIcon,\r\n  FileTextIcon,\r\n  FileVideoIcon,\r\n} from \"lucide-react\";\r\nimport * as React from \"react\";\r\n\r\nconst ROOT_NAME = \"FileUpload\";\r\nconst DROPZONE_NAME = \"FileUploadDropzone\";\r\nconst TRIGGER_NAME = \"FileUploadTrigger\";\r\nconst LIST_NAME = \"FileUploadList\";\r\nconst ITEM_NAME = \"FileUploadItem\";\r\nconst ITEM_PREVIEW_NAME = \"FileUploadItemPreview\";\r\nconst ITEM_METADATA_NAME = \"FileUploadItemMetadata\";\r\nconst ITEM_PROGRESS_NAME = \"FileUploadItemProgress\";\r\nconst ITEM_DELETE_NAME = \"FileUploadItemDelete\";\r\nconst CLEAR_NAME = \"FileUploadClear\";\r\n\r\nconst FILE_UPLOAD_ERRORS = {\r\n  [ROOT_NAME]: `\\`${ROOT_NAME}\\` must be used as root component`,\r\n  [DROPZONE_NAME]: `\\`${DROPZONE_NAME}\\` must be within \\`${ROOT_NAME}\\``,\r\n  [TRIGGER_NAME]: `\\`${TRIGGER_NAME}\\` must be within \\`${ROOT_NAME}\\``,\r\n  [LIST_NAME]: `\\`${LIST_NAME}\\` must be within \\`${ROOT_NAME}\\``,\r\n  [ITEM_NAME]: `\\`${ITEM_NAME}\\` must be within \\`${ROOT_NAME}\\``,\r\n  [ITEM_PREVIEW_NAME]: `\\`${ITEM_PREVIEW_NAME}\\` must be within \\`${ITEM_NAME}\\``,\r\n  [ITEM_METADATA_NAME]: `\\`${ITEM_METADATA_NAME}\\` must be within \\`${ITEM_NAME}\\``,\r\n  [ITEM_PROGRESS_NAME]: `\\`${ITEM_PROGRESS_NAME}\\` must be within \\`${ITEM_NAME}\\``,\r\n  [ITEM_DELETE_NAME]: `\\`${ITEM_DELETE_NAME}\\` must be within \\`${ITEM_NAME}\\``,\r\n  [CLEAR_NAME]: `\\`${CLEAR_NAME}\\` must be within \\`${ROOT_NAME}\\``,\r\n} as const;\r\n\r\nconst useIsomorphicLayoutEffect =\r\n  typeof window !== \"undefined\" ? React.useLayoutEffect : React.useEffect;\r\n\r\nfunction useAsRef<T>(data: T) {\r\n  const ref = React.useRef<T>(data);\r\n  useIsomorphicLayoutEffect(() => {\r\n    ref.current = data;\r\n  });\r\n  return ref;\r\n}\r\n\r\nfunction useLazyRef<T>(fn: () => T) {\r\n  const ref = React.useRef<T | null>(null);\r\n  if (ref.current === null) {\r\n    ref.current = fn();\r\n  }\r\n  return ref as React.RefObject<T>;\r\n}\r\n\r\ntype Direction = \"ltr\" | \"rtl\";\r\n\r\nconst DirectionContext = React.createContext<Direction | undefined>(undefined);\r\n\r\nfunction useDirection(dirProp?: Direction): Direction {\r\n  const contextDir = React.useContext(DirectionContext);\r\n  return dirProp ?? contextDir ?? \"ltr\";\r\n}\r\n\r\ninterface FileState {\r\n  file: File;\r\n  progress: number;\r\n  error?: string;\r\n  status: \"idle\" | \"uploading\" | \"error\" | \"success\";\r\n}\r\n\r\ninterface StoreState {\r\n  files: Map<File, FileState>;\r\n  dragOver: boolean;\r\n  invalid: boolean;\r\n}\r\n\r\ntype StoreAction =\r\n  | { variant: \"ADD_FILES\"; files: File[] }\r\n  | { variant: \"SET_FILES\"; files: File[] }\r\n  | { variant: \"SET_PROGRESS\"; file: File; progress: number }\r\n  | { variant: \"SET_SUCCESS\"; file: File }\r\n  | { variant: \"SET_ERROR\"; file: File; error: string }\r\n  | { variant: \"REMOVE_FILE\"; file: File }\r\n  | { variant: \"SET_DRAG_OVER\"; dragOver: boolean }\r\n  | { variant: \"SET_INVALID\"; invalid: boolean }\r\n  | { variant: \"CLEAR\" };\r\n\r\nfunction createStore(\r\n  listeners: Set<() => void>,\r\n  files: Map<File, FileState>,\r\n  onValueChange?: (files: File[]) => void,\r\n  invalid?: boolean,\r\n) {\r\n  const initialState: StoreState = {\r\n    files,\r\n    dragOver: false,\r\n    invalid: invalid ?? false,\r\n  };\r\n\r\n  let state = initialState;\r\n\r\n  function reducer(state: StoreState, action: StoreAction): StoreState {\r\n    switch (action.variant) {\r\n      case \"ADD_FILES\": {\r\n        for (const file of action.files) {\r\n          files.set(file, {\r\n            file,\r\n            progress: 0,\r\n            status: \"idle\",\r\n          });\r\n        }\r\n\r\n        if (onValueChange) {\r\n          const fileList = Array.from(files.values()).map(\r\n            (fileState) => fileState.file,\r\n          );\r\n          onValueChange(fileList);\r\n        }\r\n        return { ...state, files };\r\n      }\r\n\r\n      case \"SET_FILES\": {\r\n        const newFileSet = new Set(action.files);\r\n        for (const existingFile of files.keys()) {\r\n          if (!newFileSet.has(existingFile)) {\r\n            files.delete(existingFile);\r\n          }\r\n        }\r\n\r\n        for (const file of action.files) {\r\n          const existingState = files.get(file);\r\n          if (!existingState) {\r\n            files.set(file, {\r\n              file,\r\n              progress: 0,\r\n              status: \"idle\",\r\n            });\r\n          }\r\n        }\r\n        return { ...state, files };\r\n      }\r\n\r\n      case \"SET_PROGRESS\": {\r\n        const fileState = files.get(action.file);\r\n        if (fileState) {\r\n          files.set(action.file, {\r\n            ...fileState,\r\n            progress: action.progress,\r\n            status: \"uploading\",\r\n          });\r\n        }\r\n        return { ...state, files };\r\n      }\r\n\r\n      case \"SET_SUCCESS\": {\r\n        const fileState = files.get(action.file);\r\n        if (fileState) {\r\n          files.set(action.file, {\r\n            ...fileState,\r\n            progress: 100,\r\n            status: \"success\",\r\n          });\r\n        }\r\n        return { ...state, files };\r\n      }\r\n\r\n      case \"SET_ERROR\": {\r\n        const fileState = files.get(action.file);\r\n        if (fileState) {\r\n          files.set(action.file, {\r\n            ...fileState,\r\n            error: action.error,\r\n            status: \"error\",\r\n          });\r\n        }\r\n        return { ...state, files };\r\n      }\r\n\r\n      case \"REMOVE_FILE\": {\r\n        files.delete(action.file);\r\n\r\n        if (onValueChange) {\r\n          const fileList = Array.from(files.values()).map(\r\n            (fileState) => fileState.file,\r\n          );\r\n          onValueChange(fileList);\r\n        }\r\n        return { ...state, files };\r\n      }\r\n\r\n      case \"SET_DRAG_OVER\": {\r\n        return { ...state, dragOver: action.dragOver };\r\n      }\r\n\r\n      case \"SET_INVALID\": {\r\n        return { ...state, invalid: action.invalid };\r\n      }\r\n\r\n      case \"CLEAR\": {\r\n        files.clear();\r\n        if (onValueChange) {\r\n          onValueChange([]);\r\n        }\r\n        return { ...state, files, invalid: false };\r\n      }\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n\r\n  function getState() {\r\n    return state;\r\n  }\r\n\r\n  function dispatch(action: StoreAction) {\r\n    state = reducer(state, action);\r\n    for (const listener of listeners) {\r\n      listener();\r\n    }\r\n  }\r\n\r\n  function subscribe(listener: () => void) {\r\n    listeners.add(listener);\r\n    return () => listeners.delete(listener);\r\n  }\r\n\r\n  return { getState, dispatch, subscribe };\r\n}\r\n\r\nconst StoreContext = React.createContext<ReturnType<typeof createStore> | null>(\r\n  null,\r\n);\r\nStoreContext.displayName = ROOT_NAME;\r\n\r\nfunction useStoreContext(name: keyof typeof FILE_UPLOAD_ERRORS) {\r\n  const context = React.useContext(StoreContext);\r\n  if (!context) {\r\n    throw new Error(FILE_UPLOAD_ERRORS[name]);\r\n  }\r\n  return context;\r\n}\r\n\r\nfunction useStore<T>(selector: (state: StoreState) => T): T {\r\n  const store = useStoreContext(ROOT_NAME);\r\n\r\n  const lastValueRef = useLazyRef<{ value: T; state: StoreState } | null>(\r\n    () => null,\r\n  );\r\n\r\n  const getSnapshot = React.useCallback(() => {\r\n    const state = store.getState();\r\n    const prevValue = lastValueRef.current;\r\n\r\n    if (prevValue && prevValue.state === state) {\r\n      return prevValue.value;\r\n    }\r\n\r\n    const nextValue = selector(state);\r\n    lastValueRef.current = { value: nextValue, state };\r\n    return nextValue;\r\n  }, [store, selector, lastValueRef]);\r\n\r\n  return React.useSyncExternalStore(store.subscribe, getSnapshot, getSnapshot);\r\n}\r\n\r\ninterface FileUploadContextValue {\r\n  inputId: string;\r\n  dropzoneId: string;\r\n  listId: string;\r\n  labelId: string;\r\n  disabled: boolean;\r\n  dir: Direction;\r\n  inputRef: React.RefObject<HTMLInputElement | null>;\r\n}\r\n\r\nconst FileUploadContext = React.createContext<FileUploadContextValue | null>(\r\n  null,\r\n);\r\n\r\nfunction useFileUploadContext(name: keyof typeof FILE_UPLOAD_ERRORS) {\r\n  const context = React.useContext(FileUploadContext);\r\n  if (!context) {\r\n    throw new Error(FILE_UPLOAD_ERRORS[name]);\r\n  }\r\n  return context;\r\n}\r\n\r\ninterface FileUploadRootProps\r\n  extends Omit<\r\n    React.ComponentPropsWithoutRef<\"div\">,\r\n    \"defaultValue\" | \"onChange\"\r\n  > {\r\n  value?: File[];\r\n  defaultValue?: File[];\r\n  onValueChange?: (files: File[]) => void;\r\n  onAccept?: (files: File[]) => void;\r\n  onFileAccept?: (file: File) => void;\r\n  onFileReject?: (file: File, message: string) => void;\r\n  onFileValidate?: (file: File) => string | null | undefined;\r\n  onUpload?: (\r\n    files: File[],\r\n    options: {\r\n      onProgress: (file: File, progress: number) => void;\r\n      onSuccess: (file: File) => void;\r\n      onError: (file: File, error: Error) => void;\r\n    },\r\n  ) => Promise<void> | void;\r\n  accept?: string;\r\n  maxFiles?: number;\r\n  maxSize?: number;\r\n  dir?: Direction;\r\n  label?: string;\r\n  name?: string;\r\n  asChild?: boolean;\r\n  disabled?: boolean;\r\n  invalid?: boolean;\r\n  multiple?: boolean;\r\n  required?: boolean;\r\n}\r\n\r\nconst FileUploadRoot = React.forwardRef<HTMLDivElement, FileUploadRootProps>(\r\n  (props, forwardedRef) => {\r\n    const {\r\n      value,\r\n      defaultValue,\r\n      onValueChange,\r\n      onAccept,\r\n      onFileAccept,\r\n      onFileReject,\r\n      onFileValidate,\r\n      onUpload,\r\n      accept,\r\n      maxFiles,\r\n      maxSize,\r\n      dir: dirProp,\r\n      label,\r\n      name,\r\n      asChild,\r\n      disabled = false,\r\n      invalid = false,\r\n      multiple = false,\r\n      required = false,\r\n      children,\r\n      className,\r\n      ...rootProps\r\n    } = props;\r\n\r\n    const inputId = React.useId();\r\n    const dropzoneId = React.useId();\r\n    const listId = React.useId();\r\n    const labelId = React.useId();\r\n\r\n    const dir = useDirection(dirProp);\r\n    const propsRef = useAsRef(props);\r\n    const listeners = useLazyRef(() => new Set<() => void>()).current;\r\n    const files = useLazyRef<Map<File, FileState>>(() => new Map()).current;\r\n    const inputRef = React.useRef<HTMLInputElement>(null);\r\n    const isControlled = value !== undefined;\r\n\r\n    const store = React.useMemo(\r\n      () => createStore(listeners, files, onValueChange, invalid),\r\n      [listeners, files, onValueChange, invalid],\r\n    );\r\n\r\n    const contextValue = React.useMemo<FileUploadContextValue>(\r\n      () => ({\r\n        dropzoneId,\r\n        inputId,\r\n        listId,\r\n        labelId,\r\n        dir,\r\n        disabled,\r\n        inputRef,\r\n      }),\r\n      [dropzoneId, inputId, listId, labelId, dir, disabled],\r\n    );\r\n\r\n    React.useEffect(() => {\r\n      if (isControlled) {\r\n        store.dispatch({ variant: \"SET_FILES\", files: value });\r\n      } else if (\r\n        defaultValue &&\r\n        defaultValue.length > 0 &&\r\n        !store.getState().files.size\r\n      ) {\r\n        store.dispatch({ variant: \"SET_FILES\", files: defaultValue });\r\n      }\r\n    }, [value, defaultValue, isControlled, store]);\r\n\r\n    const onFilesChange = React.useCallback(\r\n      (originalFiles: File[]) => {\r\n        if (propsRef.current.disabled) return;\r\n\r\n        let filesToProcess = [...originalFiles];\r\n        let invalid = false;\r\n\r\n        if (propsRef.current.maxFiles) {\r\n          const currentCount = store.getState().files.size;\r\n          const remainingSlotCount = Math.max(\r\n            0,\r\n            propsRef.current.maxFiles - currentCount,\r\n          );\r\n\r\n          if (remainingSlotCount < filesToProcess.length) {\r\n            const rejectedFiles = filesToProcess.slice(remainingSlotCount);\r\n            invalid = true;\r\n\r\n            filesToProcess = filesToProcess.slice(0, remainingSlotCount);\r\n\r\n            for (const file of rejectedFiles) {\r\n              let rejectionMessage = `Maximum ${propsRef.current.maxFiles} files allowed`;\r\n\r\n              if (propsRef.current.onFileValidate) {\r\n                const validationMessage = propsRef.current.onFileValidate(file);\r\n                if (validationMessage) {\r\n                  rejectionMessage = validationMessage;\r\n                }\r\n              }\r\n\r\n              propsRef.current.onFileReject?.(file, rejectionMessage);\r\n            }\r\n          }\r\n        }\r\n\r\n        const acceptedFiles: File[] = [];\r\n        const rejectedFiles: { file: File; message: string }[] = [];\r\n\r\n        for (const file of filesToProcess) {\r\n          let rejected = false;\r\n          let rejectionMessage = \"\";\r\n\r\n          if (propsRef.current.onFileValidate) {\r\n            const validationMessage = propsRef.current.onFileValidate(file);\r\n            if (validationMessage) {\r\n              rejectionMessage = validationMessage;\r\n              propsRef.current.onFileReject?.(file, rejectionMessage);\r\n              rejected = true;\r\n              invalid = true;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          if (propsRef.current.accept) {\r\n            const acceptTypes = propsRef.current.accept\r\n              .split(\",\")\r\n              .map((t) => t.trim());\r\n            const fileType = file.type;\r\n            const fileExtension = `.${file.name.split(\".\").pop()}`;\r\n\r\n            if (\r\n              !acceptTypes.some(\r\n                (type) =>\r\n                  type === fileType ||\r\n                  type === fileExtension ||\r\n                  (type.includes(\"/*\") &&\r\n                    fileType.startsWith(type.replace(\"/*\", \"/\"))),\r\n              )\r\n            ) {\r\n              rejectionMessage = \"File type not accepted\";\r\n              propsRef.current.onFileReject?.(file, rejectionMessage);\r\n              rejected = true;\r\n              invalid = true;\r\n            }\r\n          }\r\n\r\n          if (\r\n            propsRef.current.maxSize &&\r\n            file.size > propsRef.current.maxSize\r\n          ) {\r\n            rejectionMessage = \"File too large\";\r\n            propsRef.current.onFileReject?.(file, rejectionMessage);\r\n            rejected = true;\r\n            invalid = true;\r\n          }\r\n\r\n          if (!rejected) {\r\n            acceptedFiles.push(file);\r\n          } else {\r\n            rejectedFiles.push({ file, message: rejectionMessage });\r\n          }\r\n        }\r\n\r\n        if (invalid) {\r\n          store.dispatch({ variant: \"SET_INVALID\", invalid });\r\n          setTimeout(() => {\r\n            store.dispatch({ variant: \"SET_INVALID\", invalid: false });\r\n          }, 2000);\r\n        }\r\n\r\n        if (acceptedFiles.length > 0) {\r\n          store.dispatch({ variant: \"ADD_FILES\", files: acceptedFiles });\r\n\r\n          if (isControlled && propsRef.current.onValueChange) {\r\n            const currentFiles = Array.from(\r\n              store.getState().files.values(),\r\n            ).map((f) => f.file);\r\n            propsRef.current.onValueChange([...currentFiles]);\r\n          }\r\n\r\n          if (propsRef.current.onAccept) {\r\n            propsRef.current.onAccept(acceptedFiles);\r\n          }\r\n\r\n          for (const file of acceptedFiles) {\r\n            propsRef.current.onFileAccept?.(file);\r\n          }\r\n\r\n          if (propsRef.current.onUpload) {\r\n            requestAnimationFrame(() => {\r\n              onFilesUpload(acceptedFiles);\r\n            });\r\n          }\r\n        }\r\n      },\r\n      [store, isControlled, propsRef],\r\n    );\r\n\r\n    const onFilesUpload = React.useCallback(\r\n      async (files: File[]) => {\r\n        try {\r\n          for (const file of files) {\r\n            store.dispatch({ variant: \"SET_PROGRESS\", file, progress: 0 });\r\n          }\r\n\r\n          if (propsRef.current.onUpload) {\r\n            await propsRef.current.onUpload(files, {\r\n              onProgress: (file, progress) => {\r\n                store.dispatch({\r\n                  variant: \"SET_PROGRESS\",\r\n                  file,\r\n                  progress: Math.min(Math.max(0, progress), 100),\r\n                });\r\n              },\r\n              onSuccess: (file) => {\r\n                store.dispatch({ variant: \"SET_SUCCESS\", file });\r\n              },\r\n              onError: (file, error) => {\r\n                store.dispatch({\r\n                  variant: \"SET_ERROR\",\r\n                  file,\r\n                  error: error.message ?? \"Upload failed\",\r\n                });\r\n              },\r\n            });\r\n          } else {\r\n            for (const file of files) {\r\n              store.dispatch({ variant: \"SET_SUCCESS\", file });\r\n            }\r\n          }\r\n        } catch (error) {\r\n          const errorMessage =\r\n            error instanceof Error ? error.message : \"Upload failed\";\r\n          for (const file of files) {\r\n            store.dispatch({\r\n              variant: \"SET_ERROR\",\r\n              file,\r\n              error: errorMessage,\r\n            });\r\n          }\r\n        }\r\n      },\r\n      [store, propsRef.current.onUpload],\r\n    );\r\n\r\n    const onInputChange = React.useCallback(\r\n      (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const files = Array.from(event.target.files ?? []);\r\n        onFilesChange(files);\r\n        event.target.value = \"\";\r\n      },\r\n      [onFilesChange],\r\n    );\r\n\r\n    const RootPrimitive = asChild ? Slot : \"div\";\r\n\r\n    return (\r\n      <DirectionContext.Provider value={dir}>\r\n        <StoreContext.Provider value={store}>\r\n          <FileUploadContext.Provider value={contextValue}>\r\n            <RootPrimitive\r\n              data-disabled={disabled ? \"\" : undefined}\r\n              data-slot=\"file-upload\"\r\n              dir={dir}\r\n              {...rootProps}\r\n              ref={forwardedRef}\r\n              className={cn(\"relative flex flex-col gap-2\", className)}\r\n            >\r\n              {children}\r\n              <input\r\n                type=\"file\"\r\n                id={inputId}\r\n                aria-labelledby={labelId}\r\n                aria-describedby={dropzoneId}\r\n                ref={inputRef}\r\n                tabIndex={-1}\r\n                accept={accept}\r\n                name={name}\r\n                disabled={disabled}\r\n                multiple={multiple}\r\n                required={required}\r\n                className=\"sr-only\"\r\n                onChange={onInputChange}\r\n              />\r\n              <span id={labelId} className=\"sr-only\">\r\n                {label ?? \"File upload\"}\r\n              </span>\r\n            </RootPrimitive>\r\n          </FileUploadContext.Provider>\r\n        </StoreContext.Provider>\r\n      </DirectionContext.Provider>\r\n    );\r\n  },\r\n);\r\nFileUploadRoot.displayName = ROOT_NAME;\r\n\r\ninterface FileUploadDropzoneProps\r\n  extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst FileUploadDropzone = React.forwardRef<\r\n  HTMLDivElement,\r\n  FileUploadDropzoneProps\r\n>((props, forwardedRef) => {\r\n  const { asChild, className, ...dropzoneProps } = props;\r\n\r\n  const context = useFileUploadContext(DROPZONE_NAME);\r\n  const store = useStoreContext(DROPZONE_NAME);\r\n  const dragOver = useStore((state) => state.dragOver);\r\n  const invalid = useStore((state) => state.invalid);\r\n  const propsRef = useAsRef(dropzoneProps);\r\n\r\n  const onClick = React.useCallback(\r\n    (event: React.MouseEvent<HTMLDivElement>) => {\r\n      propsRef.current?.onClick?.(event);\r\n\r\n      if (event.defaultPrevented) return;\r\n\r\n      const target = event.target;\r\n\r\n      const isFromTrigger =\r\n        target instanceof HTMLElement &&\r\n        target.closest('[data-slot=\"file-upload-trigger\"]');\r\n\r\n      if (!isFromTrigger) {\r\n        context.inputRef.current?.click();\r\n      }\r\n    },\r\n    [context.inputRef, propsRef],\r\n  );\r\n\r\n  const onDragOver = React.useCallback(\r\n    (event: React.DragEvent<HTMLDivElement>) => {\r\n      propsRef.current?.onDragOver?.(event);\r\n\r\n      if (event.defaultPrevented) return;\r\n\r\n      event.preventDefault();\r\n      store.dispatch({ variant: \"SET_DRAG_OVER\", dragOver: true });\r\n    },\r\n    [store, propsRef.current.onDragOver],\r\n  );\r\n\r\n  const onDragEnter = React.useCallback(\r\n    (event: React.DragEvent<HTMLDivElement>) => {\r\n      propsRef.current?.onDragEnter?.(event);\r\n\r\n      if (event.defaultPrevented) return;\r\n\r\n      event.preventDefault();\r\n      store.dispatch({ variant: \"SET_DRAG_OVER\", dragOver: true });\r\n    },\r\n    [store, propsRef.current.onDragEnter],\r\n  );\r\n\r\n  const onDragLeave = React.useCallback(\r\n    (event: React.DragEvent<HTMLDivElement>) => {\r\n      propsRef.current?.onDragLeave?.(event);\r\n\r\n      if (event.defaultPrevented) return;\r\n\r\n      const relatedTarget = event.relatedTarget;\r\n      if (\r\n        relatedTarget &&\r\n        relatedTarget instanceof Node &&\r\n        event.currentTarget.contains(relatedTarget)\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      event.preventDefault();\r\n      store.dispatch({ variant: \"SET_DRAG_OVER\", dragOver: false });\r\n    },\r\n    [store, propsRef.current.onDragLeave],\r\n  );\r\n\r\n  const onDrop = React.useCallback(\r\n    (event: React.DragEvent<HTMLDivElement>) => {\r\n      propsRef.current?.onDrop?.(event);\r\n\r\n      if (event.defaultPrevented) return;\r\n\r\n      event.preventDefault();\r\n      store.dispatch({ variant: \"SET_DRAG_OVER\", dragOver: false });\r\n\r\n      const files = Array.from(event.dataTransfer.files);\r\n      const inputElement = context.inputRef.current;\r\n      if (!inputElement) return;\r\n\r\n      const dataTransfer = new DataTransfer();\r\n      for (const file of files) {\r\n        dataTransfer.items.add(file);\r\n      }\r\n\r\n      inputElement.files = dataTransfer.files;\r\n      inputElement.dispatchEvent(new Event(\"change\", { bubbles: true }));\r\n    },\r\n    [store, context.inputRef, propsRef.current.onDrop],\r\n  );\r\n\r\n  const onPaste = React.useCallback(\r\n    (event: React.ClipboardEvent<HTMLDivElement>) => {\r\n      propsRef.current?.onPaste?.(event);\r\n\r\n      if (event.defaultPrevented) return;\r\n\r\n      event.preventDefault();\r\n      store.dispatch({ variant: \"SET_DRAG_OVER\", dragOver: false });\r\n\r\n      const items = event.clipboardData?.items;\r\n      if (!items) return;\r\n\r\n      const files: File[] = [];\r\n      for (let i = 0; i < items.length; i++) {\r\n        const item = items[i];\r\n        if (item?.kind === \"file\") {\r\n          const file = item.getAsFile();\r\n          if (file) {\r\n            files.push(file);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (files.length === 0) return;\r\n\r\n      const inputElement = context.inputRef.current;\r\n      if (!inputElement) return;\r\n\r\n      const dataTransfer = new DataTransfer();\r\n      for (const file of files) {\r\n        dataTransfer.items.add(file);\r\n      }\r\n\r\n      inputElement.files = dataTransfer.files;\r\n      inputElement.dispatchEvent(new Event(\"change\", { bubbles: true }));\r\n    },\r\n    [store, context.inputRef, propsRef],\r\n  );\r\n\r\n  const onKeyDown = React.useCallback(\r\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n      propsRef.current?.onKeyDown?.(event);\r\n\r\n      if (\r\n        !event.defaultPrevented &&\r\n        (event.key === \"Enter\" || event.key === \" \")\r\n      ) {\r\n        event.preventDefault();\r\n        context.inputRef.current?.click();\r\n      }\r\n    },\r\n    [context.inputRef, propsRef.current.onKeyDown],\r\n  );\r\n\r\n  const DropzonePrimitive = asChild ? Slot : \"div\";\r\n\r\n  return (\r\n    <DropzonePrimitive\r\n      role=\"region\"\r\n      id={context.dropzoneId}\r\n      aria-controls={`${context.inputId} ${context.listId}`}\r\n      aria-disabled={context.disabled}\r\n      aria-invalid={invalid}\r\n      data-disabled={context.disabled ? \"\" : undefined}\r\n      data-dragging={dragOver ? \"\" : undefined}\r\n      data-invalid={invalid ? \"\" : undefined}\r\n      data-slot=\"file-upload-dropzone\"\r\n      dir={context.dir}\r\n      tabIndex={context.disabled ? undefined : 0}\r\n      {...dropzoneProps}\r\n      ref={forwardedRef}\r\n      className={cn(\r\n        \"relative flex select-none flex-col items-center justify-center gap-2 rounded-lg border-2 border-dashed p-6 outline-none transition-colors hover:bg-accent/30 focus-visible:border-ring/50 data-[disabled]:pointer-events-none data-[dragging]:border-primary data-[invalid]:border-destructive data-[invalid]:ring-destructive/20\",\r\n        className,\r\n      )}\r\n      onClick={onClick}\r\n      onDragEnter={onDragEnter}\r\n      onDragLeave={onDragLeave}\r\n      onDragOver={onDragOver}\r\n      onDrop={onDrop}\r\n      onKeyDown={onKeyDown}\r\n      onPaste={onPaste}\r\n    />\r\n  );\r\n});\r\nFileUploadDropzone.displayName = DROPZONE_NAME;\r\n\r\ninterface FileUploadTriggerProps\r\n  extends React.ComponentPropsWithoutRef<\"button\"> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst FileUploadTrigger = React.forwardRef<\r\n  HTMLButtonElement,\r\n  FileUploadTriggerProps\r\n>((props, forwardedRef) => {\r\n  const { asChild, ...triggerProps } = props;\r\n  const context = useFileUploadContext(TRIGGER_NAME);\r\n  const propsRef = useAsRef(triggerProps);\r\n\r\n  const onClick = React.useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => {\r\n      propsRef.current?.onClick?.(event);\r\n\r\n      if (event.defaultPrevented) return;\r\n\r\n      context.inputRef.current?.click();\r\n    },\r\n    [context.inputRef, propsRef.current],\r\n  );\r\n\r\n  const TriggerPrimitive = asChild ? Slot : \"button\";\r\n\r\n  return (\r\n    <TriggerPrimitive\r\n      type=\"button\"\r\n      aria-controls={context.inputId}\r\n      data-disabled={context.disabled ? \"\" : undefined}\r\n      data-slot=\"file-upload-trigger\"\r\n      {...triggerProps}\r\n      ref={forwardedRef}\r\n      disabled={context.disabled}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n});\r\nFileUploadTrigger.displayName = TRIGGER_NAME;\r\n\r\ninterface FileUploadListProps extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  orientation?: \"horizontal\" | \"vertical\";\r\n  asChild?: boolean;\r\n  forceMount?: boolean;\r\n}\r\n\r\nconst FileUploadList = React.forwardRef<HTMLDivElement, FileUploadListProps>(\r\n  (props, forwardedRef) => {\r\n    const {\r\n      className,\r\n      orientation = \"vertical\",\r\n      asChild,\r\n      forceMount,\r\n      ...listProps\r\n    } = props;\r\n\r\n    const context = useFileUploadContext(LIST_NAME);\r\n\r\n    const shouldRender =\r\n      forceMount || useStore((state) => state.files.size > 0);\r\n\r\n    if (!shouldRender) return null;\r\n\r\n    const ListPrimitive = asChild ? Slot : \"div\";\r\n\r\n    return (\r\n      <ListPrimitive\r\n        role=\"list\"\r\n        id={context.listId}\r\n        aria-orientation={orientation}\r\n        data-orientation={orientation}\r\n        data-slot=\"file-upload-list\"\r\n        data-state={shouldRender ? \"active\" : \"inactive\"}\r\n        dir={context.dir}\r\n        {...listProps}\r\n        ref={forwardedRef}\r\n        className={cn(\r\n          \"data-[state=inactive]:fade-out-0 data-[state=active]:fade-in-0 data-[state=inactive]:slide-out-to-top-2 data-[state=active]:slide-in-from-top-2 flex flex-col gap-2 data-[state=active]:animate-in data-[state=inactive]:animate-out\",\r\n          orientation === \"horizontal\" && \"flex-row overflow-x-auto p-1.5\",\r\n          className,\r\n        )}\r\n      />\r\n    );\r\n  },\r\n);\r\nFileUploadList.displayName = LIST_NAME;\r\n\r\ninterface FileUploadItemContextValue {\r\n  id: string;\r\n  fileState: FileState | undefined;\r\n  nameId: string;\r\n  sizeId: string;\r\n  statusId: string;\r\n  messageId: string;\r\n}\r\n\r\nconst FileUploadItemContext =\r\n  React.createContext<FileUploadItemContextValue | null>(null);\r\n\r\nfunction useFileUploadItemContext(name: keyof typeof FILE_UPLOAD_ERRORS) {\r\n  const context = React.useContext(FileUploadItemContext);\r\n  if (!context) {\r\n    throw new Error(FILE_UPLOAD_ERRORS[name]);\r\n  }\r\n  return context;\r\n}\r\n\r\ninterface FileUploadItemProps extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  value: File;\r\n  asChild?: boolean;\r\n}\r\n\r\nconst FileUploadItem = React.forwardRef<HTMLDivElement, FileUploadItemProps>(\r\n  (props, forwardedRef) => {\r\n    const { value, asChild, className, ...itemProps } = props;\r\n\r\n    const id = React.useId();\r\n    const statusId = `${id}-status`;\r\n    const nameId = `${id}-name`;\r\n    const sizeId = `${id}-size`;\r\n    const messageId = `${id}-message`;\r\n\r\n    const context = useFileUploadContext(ITEM_NAME);\r\n    const fileState = useStore((state) => state.files.get(value));\r\n    const fileCount = useStore((state) => state.files.size);\r\n    const fileIndex = useStore((state) => {\r\n      const files = Array.from(state.files.keys());\r\n      return files.indexOf(value) + 1;\r\n    });\r\n\r\n    const itemContext = React.useMemo(\r\n      () => ({\r\n        id,\r\n        fileState,\r\n        nameId,\r\n        sizeId,\r\n        statusId,\r\n        messageId,\r\n      }),\r\n      [id, fileState, statusId, nameId, sizeId, messageId],\r\n    );\r\n\r\n    if (!fileState) return null;\r\n\r\n    const statusText = fileState.error\r\n      ? `Error: ${fileState.error}`\r\n      : fileState.status === \"uploading\"\r\n        ? `Uploading: ${fileState.progress}% complete`\r\n        : fileState.status === \"success\"\r\n          ? \"Upload complete\"\r\n          : \"Ready to upload\";\r\n\r\n    const ItemPrimitive = asChild ? Slot : \"div\";\r\n\r\n    return (\r\n      <FileUploadItemContext.Provider value={itemContext}>\r\n        <ItemPrimitive\r\n          role=\"listitem\"\r\n          id={id}\r\n          aria-setsize={fileCount}\r\n          aria-posinset={fileIndex}\r\n          aria-describedby={`${nameId} ${sizeId} ${statusId} ${\r\n            fileState.error ? messageId : \"\"\r\n          }`}\r\n          aria-labelledby={nameId}\r\n          data-slot=\"file-upload-item\"\r\n          dir={context.dir}\r\n          {...itemProps}\r\n          ref={forwardedRef}\r\n          className={cn(\r\n            \"relative flex items-center gap-2.5 rounded-md border p-3\",\r\n            className,\r\n          )}\r\n        >\r\n          {props.children}\r\n          <span id={statusId} className=\"sr-only\">\r\n            {statusText}\r\n          </span>\r\n        </ItemPrimitive>\r\n      </FileUploadItemContext.Provider>\r\n    );\r\n  },\r\n);\r\nFileUploadItem.displayName = ITEM_NAME;\r\n\r\nfunction formatBytes(bytes: number) {\r\n  if (bytes === 0) return \"0 B\";\r\n  const sizes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\r\n  return `${(bytes / 1024 ** i).toFixed(i ? 1 : 0)} ${sizes[i]}`;\r\n}\r\n\r\nfunction getFileIcon(file: File) {\r\n  const type = file.type;\r\n  const extension = file.name.split(\".\").pop()?.toLowerCase() ?? \"\";\r\n\r\n  if (type.startsWith(\"video/\")) {\r\n    return <FileVideoIcon />;\r\n  }\r\n\r\n  if (type.startsWith(\"audio/\")) {\r\n    return <FileAudioIcon />;\r\n  }\r\n\r\n  if (\r\n    type.startsWith(\"text/\") ||\r\n    [\"txt\", \"md\", \"rtf\", \"pdf\"].includes(extension)\r\n  ) {\r\n    return <FileTextIcon />;\r\n  }\r\n\r\n  if (\r\n    [\r\n      \"html\",\r\n      \"css\",\r\n      \"js\",\r\n      \"jsx\",\r\n      \"ts\",\r\n      \"tsx\",\r\n      \"json\",\r\n      \"xml\",\r\n      \"php\",\r\n      \"py\",\r\n      \"rb\",\r\n      \"java\",\r\n      \"c\",\r\n      \"cpp\",\r\n      \"cs\",\r\n    ].includes(extension)\r\n  ) {\r\n    return <FileCodeIcon />;\r\n  }\r\n\r\n  if ([\"zip\", \"rar\", \"7z\", \"tar\", \"gz\", \"bz2\"].includes(extension)) {\r\n    return <FileArchiveIcon />;\r\n  }\r\n\r\n  if (\r\n    [\"exe\", \"msi\", \"app\", \"apk\", \"deb\", \"rpm\"].includes(extension) ||\r\n    type.startsWith(\"application/\")\r\n  ) {\r\n    return <FileCogIcon />;\r\n  }\r\n\r\n  return <FileIcon />;\r\n}\r\n\r\ninterface FileUploadItemPreviewProps\r\n  extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  render?: (file: File) => React.ReactNode;\r\n  asChild?: boolean;\r\n}\r\n\r\nconst FileUploadItemPreview = React.forwardRef<\r\n  HTMLDivElement,\r\n  FileUploadItemPreviewProps\r\n>((props, forwardedRef) => {\r\n  const { render, asChild, children, className, ...previewProps } = props;\r\n\r\n  const itemContext = useFileUploadItemContext(ITEM_PREVIEW_NAME);\r\n\r\n  const onPreviewRender = React.useCallback(\r\n    (file: File) => {\r\n      if (render) return render(file);\r\n\r\n      if (itemContext.fileState?.file.type.startsWith(\"image/\")) {\r\n        return (\r\n          <img\r\n            src={URL.createObjectURL(file)}\r\n            alt={file.name}\r\n            className=\"size-full object-cover\"\r\n            onLoad={(event) => {\r\n              if (!(event.target instanceof HTMLImageElement)) return;\r\n              URL.revokeObjectURL(event.target.src);\r\n            }}\r\n          />\r\n        );\r\n      }\r\n\r\n      return getFileIcon(file);\r\n    },\r\n    [render, itemContext.fileState?.file.type],\r\n  );\r\n\r\n  if (!itemContext.fileState) return null;\r\n\r\n  const ItemPreviewPrimitive = asChild ? Slot : \"div\";\r\n\r\n  return (\r\n    <ItemPreviewPrimitive\r\n      aria-labelledby={itemContext.nameId}\r\n      data-slot=\"file-upload-preview\"\r\n      {...previewProps}\r\n      ref={forwardedRef}\r\n      className={cn(\r\n        \"relative flex size-10 shrink-0 items-center justify-center overflow-hidden rounded border bg-accent/50 [&>svg]:size-10\",\r\n        className,\r\n      )}\r\n    >\r\n      {onPreviewRender(itemContext.fileState.file)}\r\n      {children}\r\n    </ItemPreviewPrimitive>\r\n  );\r\n});\r\nFileUploadItemPreview.displayName = ITEM_PREVIEW_NAME;\r\n\r\ninterface FileUploadItemMetadataProps\r\n  extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  asChild?: boolean;\r\n  size?: \"default\" | \"sm\";\r\n}\r\n\r\nconst FileUploadItemMetadata = React.forwardRef<\r\n  HTMLDivElement,\r\n  FileUploadItemMetadataProps\r\n>((props, forwardedRef) => {\r\n  const {\r\n    asChild,\r\n    size = \"default\",\r\n    children,\r\n    className,\r\n    ...metadataProps\r\n  } = props;\r\n\r\n  const context = useFileUploadContext(ITEM_METADATA_NAME);\r\n  const itemContext = useFileUploadItemContext(ITEM_METADATA_NAME);\r\n\r\n  if (!itemContext.fileState) return null;\r\n\r\n  const ItemMetadataPrimitive = asChild ? Slot : \"div\";\r\n\r\n  return (\r\n    <ItemMetadataPrimitive\r\n      data-slot=\"file-upload-metadata\"\r\n      dir={context.dir}\r\n      {...metadataProps}\r\n      ref={forwardedRef}\r\n      className={cn(\"flex min-w-0 flex-1 flex-col\", className)}\r\n    >\r\n      {children ?? (\r\n        <>\r\n          <span\r\n            id={itemContext.nameId}\r\n            className={cn(\r\n              \"truncate font-medium text-sm\",\r\n              size === \"sm\" && \"font-normal text-[13px] leading-snug\",\r\n            )}\r\n          >\r\n            {itemContext.fileState.file.name}\r\n          </span>\r\n          <span\r\n            id={itemContext.sizeId}\r\n            className={cn(\r\n              \"truncate text-muted-foreground text-xs\",\r\n              size === \"sm\" && \"text-[11px]\",\r\n            )}\r\n          >\r\n            {formatBytes(itemContext.fileState.file.size)}\r\n          </span>\r\n          {itemContext.fileState.error && (\r\n            <span\r\n              id={itemContext.messageId}\r\n              className=\"text-destructive text-xs\"\r\n            >\r\n              {itemContext.fileState.error}\r\n            </span>\r\n          )}\r\n        </>\r\n      )}\r\n    </ItemMetadataPrimitive>\r\n  );\r\n});\r\nFileUploadItemMetadata.displayName = ITEM_METADATA_NAME;\r\n\r\ninterface FileUploadItemProgressProps\r\n  extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  asChild?: boolean;\r\n  variant?: \"linear\" | \"circular\" | \"fill\";\r\n  size?: number;\r\n  forceMount?: boolean;\r\n}\r\n\r\nconst FileUploadItemProgress = React.forwardRef<\r\n  HTMLDivElement,\r\n  FileUploadItemProgressProps\r\n>((props, forwardedRef) => {\r\n  const {\r\n    variant = \"linear\",\r\n    size = 40,\r\n    asChild,\r\n    forceMount,\r\n    className,\r\n    ...progressProps\r\n  } = props;\r\n\r\n  const itemContext = useFileUploadItemContext(ITEM_PROGRESS_NAME);\r\n\r\n  if (!itemContext.fileState) return null;\r\n\r\n  const shouldRender = forceMount || itemContext.fileState.progress !== 100;\r\n\r\n  if (!shouldRender) return null;\r\n\r\n  const ItemProgressPrimitive = asChild ? Slot : \"div\";\r\n\r\n  switch (variant) {\r\n    case \"circular\": {\r\n      const circumference = 2 * Math.PI * ((size - 4) / 2);\r\n      const strokeDashoffset =\r\n        circumference - (itemContext.fileState.progress / 100) * circumference;\r\n\r\n      return (\r\n        <ItemProgressPrimitive\r\n          role=\"progressbar\"\r\n          aria-valuemin={0}\r\n          aria-valuemax={100}\r\n          aria-valuenow={itemContext.fileState.progress}\r\n          aria-valuetext={`${itemContext.fileState.progress}%`}\r\n          aria-labelledby={itemContext.nameId}\r\n          data-slot=\"file-upload-progress\"\r\n          {...progressProps}\r\n          ref={forwardedRef}\r\n          className={cn(\r\n            \"-translate-x-1/2 -translate-y-1/2 absolute top-1/2 left-1/2\",\r\n            className,\r\n          )}\r\n        >\r\n          <svg\r\n            className=\"rotate-[-90deg] transform\"\r\n            width={size}\r\n            height={size}\r\n            viewBox={`0 0 ${size} ${size}`}\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n          >\r\n            <circle\r\n              className=\"text-primary/20\"\r\n              strokeWidth=\"2\"\r\n              cx={size / 2}\r\n              cy={size / 2}\r\n              r={(size - 4) / 2}\r\n            />\r\n            <circle\r\n              className=\"text-primary transition-[stroke-dashoffset] duration-300 ease-linear\"\r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n              strokeDasharray={circumference}\r\n              strokeDashoffset={strokeDashoffset}\r\n              cx={size / 2}\r\n              cy={size / 2}\r\n              r={(size - 4) / 2}\r\n            />\r\n          </svg>\r\n        </ItemProgressPrimitive>\r\n      );\r\n    }\r\n\r\n    case \"fill\": {\r\n      const progressPercentage = itemContext.fileState.progress;\r\n      const topInset = 100 - progressPercentage;\r\n\r\n      return (\r\n        <ItemProgressPrimitive\r\n          role=\"progressbar\"\r\n          aria-valuemin={0}\r\n          aria-valuemax={100}\r\n          aria-valuenow={progressPercentage}\r\n          aria-valuetext={`${progressPercentage}%`}\r\n          aria-labelledby={itemContext.nameId}\r\n          data-slot=\"file-upload-progress\"\r\n          {...progressProps}\r\n          ref={forwardedRef}\r\n          className={cn(\r\n            \"absolute inset-0 bg-primary/50 transition-[clip-path] duration-300 ease-linear\",\r\n            className,\r\n          )}\r\n          style={{\r\n            clipPath: `inset(${topInset}% 0% 0% 0%)`,\r\n          }}\r\n        />\r\n      );\r\n    }\r\n\r\n    default:\r\n      return (\r\n        <ItemProgressPrimitive\r\n          role=\"progressbar\"\r\n          aria-valuemin={0}\r\n          aria-valuemax={100}\r\n          aria-valuenow={itemContext.fileState.progress}\r\n          aria-valuetext={`${itemContext.fileState.progress}%`}\r\n          aria-labelledby={itemContext.nameId}\r\n          data-slot=\"file-upload-progress\"\r\n          {...progressProps}\r\n          ref={forwardedRef}\r\n          className={cn(\r\n            \"relative h-1.5 w-full overflow-hidden rounded-full bg-primary/20\",\r\n            className,\r\n          )}\r\n        >\r\n          <div\r\n            className=\"h-full w-full flex-1 bg-primary transition-transform duration-300 ease-linear\"\r\n            style={{\r\n              transform: `translateX(-${100 - itemContext.fileState.progress}%)`,\r\n            }}\r\n          />\r\n        </ItemProgressPrimitive>\r\n      );\r\n  }\r\n});\r\nFileUploadItemProgress.displayName = ITEM_PROGRESS_NAME;\r\n\r\ninterface FileUploadItemDeleteProps\r\n  extends React.ComponentPropsWithoutRef<\"button\"> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst FileUploadItemDelete = React.forwardRef<\r\n  HTMLButtonElement,\r\n  FileUploadItemDeleteProps\r\n>((props, forwardedRef) => {\r\n  const { asChild, ...deleteProps } = props;\r\n\r\n  const store = useStoreContext(ITEM_DELETE_NAME);\r\n  const itemContext = useFileUploadItemContext(ITEM_DELETE_NAME);\r\n  const propsRef = useAsRef(deleteProps);\r\n\r\n  const onClick = React.useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => {\r\n      propsRef.current?.onClick?.(event);\r\n\r\n      if (!itemContext.fileState || event.defaultPrevented) return;\r\n\r\n      store.dispatch({\r\n        variant: \"REMOVE_FILE\",\r\n        file: itemContext.fileState.file,\r\n      });\r\n    },\r\n    [store, itemContext.fileState, propsRef.current?.onClick],\r\n  );\r\n\r\n  if (!itemContext.fileState) return null;\r\n\r\n  const ItemDeletePrimitive = asChild ? Slot : \"button\";\r\n\r\n  return (\r\n    <ItemDeletePrimitive\r\n      type=\"button\"\r\n      aria-controls={itemContext.id}\r\n      aria-describedby={itemContext.nameId}\r\n      data-slot=\"file-upload-item-delete\"\r\n      {...deleteProps}\r\n      ref={forwardedRef}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n});\r\nFileUploadItemDelete.displayName = ITEM_DELETE_NAME;\r\n\r\ninterface FileUploadClearProps\r\n  extends React.ComponentPropsWithoutRef<\"button\"> {\r\n  forceMount?: boolean;\r\n  asChild?: boolean;\r\n}\r\n\r\nconst FileUploadClear = React.forwardRef<\r\n  HTMLButtonElement,\r\n  FileUploadClearProps\r\n>((props, forwardedRef) => {\r\n  const { asChild, forceMount, disabled, ...clearProps } = props;\r\n\r\n  const context = useFileUploadContext(CLEAR_NAME);\r\n  const store = useStoreContext(CLEAR_NAME);\r\n  const propsRef = useAsRef(clearProps);\r\n\r\n  const isDisabled = disabled || context.disabled;\r\n\r\n  const onClick = React.useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => {\r\n      propsRef.current?.onClick?.(event);\r\n\r\n      if (event.defaultPrevented) return;\r\n\r\n      store.dispatch({ variant: \"CLEAR\" });\r\n    },\r\n    [store, propsRef],\r\n  );\r\n\r\n  const shouldRender = forceMount || useStore((state) => state.files.size > 0);\r\n\r\n  if (!shouldRender) return null;\r\n\r\n  const ClearPrimitive = asChild ? Slot : \"button\";\r\n\r\n  return (\r\n    <ClearPrimitive\r\n      type=\"button\"\r\n      aria-controls={context.listId}\r\n      data-slot=\"file-upload-clear\"\r\n      data-disabled={isDisabled ? \"\" : undefined}\r\n      {...clearProps}\r\n      ref={forwardedRef}\r\n      disabled={isDisabled}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n});\r\nFileUploadClear.displayName = CLEAR_NAME;\r\n\r\nconst FileUpload = FileUploadRoot;\r\nconst Root = FileUploadRoot;\r\nconst Trigger = FileUploadTrigger;\r\nconst Dropzone = FileUploadDropzone;\r\nconst List = FileUploadList;\r\nconst Item = FileUploadItem;\r\nconst ItemPreview = FileUploadItemPreview;\r\nconst ItemMetadata = FileUploadItemMetadata;\r\nconst ItemProgress = FileUploadItemProgress;\r\nconst ItemDelete = FileUploadItemDelete;\r\nconst Clear = FileUploadClear;\r\n\r\nexport {\r\n  FileUpload,\r\n  FileUploadDropzone,\r\n  FileUploadTrigger,\r\n  FileUploadList,\r\n  FileUploadItem,\r\n  FileUploadItemPreview,\r\n  FileUploadItemMetadata,\r\n  FileUploadItemProgress,\r\n  FileUploadItemDelete,\r\n  FileUploadClear,\r\n  //\r\n  Root,\r\n  Dropzone,\r\n  Trigger,\r\n  List,\r\n  Item,\r\n  ItemPreview,\r\n  ItemMetadata,\r\n  ItemProgress,\r\n  ItemDelete,\r\n  Clear,\r\n  //\r\n  useStore as useFileUpload,\r\n};\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}