{
  "name": "image-crop-form-demo",
  "type": "registry:example",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "slider",
    "input",
    "label",
    "card",
    "avatar"
  ],
  "files": [
    {
      "path": "examples/image-crop-form-demo.tsx",
      "content": "\"use client\";\n\nimport { Upload } from \"lucide-react\";\nimport * as React from \"react\";\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/default/ui/avatar\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\nimport * as ImageCrop from \"@/registry/default/ui/image-crop\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Label } from \"@/registry/default/ui/label\";\n\nexport default function ImageCropFormDemo() {\n  const [src, setSrc] = React.useState<string>();\n  const [cropValue, setCropValue] = React.useState({\n    x: 25,\n    y: 25,\n    width: 50,\n    height: 50,\n  });\n  const [zoom, setZoom] = React.useState(1);\n  const [rotation, setRotation] = React.useState(0);\n  const [croppedImage, setCroppedImage] = React.useState<string>();\n  const [name, setName] = React.useState(\"John Doe\");\n  const [email, setEmail] = React.useState(\"john@example.com\");\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const url = URL.createObjectURL(file);\n      setSrc(url);\n    }\n  };\n\n  const handleCropComplete = async () => {\n    if (!src || !cropValue) return;\n\n    // In a real implementation, you would process the crop here\n    // For demo purposes, we'll just use the original image\n    setCroppedImage(src);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"Form submitted:\", {\n      name,\n      email,\n      profileImage: croppedImage,\n      cropSettings: { cropValue, zoom, rotation },\n    });\n    alert(\"Profile updated successfully!\");\n  };\n\n  return (\n    <div className=\"mx-auto w-full max-w-4xl space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Update Profile</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-2\">\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"avatar-upload\">Profile Picture</Label>\n                  <div className=\"flex items-center gap-4\">\n                    <Avatar className=\"h-16 w-16\">\n                      <AvatarImage src={croppedImage} alt={name} />\n                      <AvatarFallback>\n                        {name\n                          .split(\" \")\n                          .map((n) => n[0])\n                          .join(\"\")}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <Input\n                        id=\"avatar-upload\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleFileChange}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {croppedImage && (\n                  <div className=\"flex gap-2\">\n                    <Button type=\"submit\">Update Profile</Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setSrc(undefined);\n                        setCroppedImage(undefined);\n                      }}\n                    >\n                      Remove Image\n                    </Button>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"space-y-4\">\n                {src ? (\n                  <ImageCrop.Root\n                    src={src}\n                    alt=\"Profile picture crop\"\n                    value={cropValue}\n                    onValueChange={setCropValue}\n                    zoom={zoom}\n                    onZoomChange={setZoom}\n                    rotation={rotation}\n                    onRotationChange={setRotation}\n                    aspect={1}\n                    cropShape=\"round\"\n                    onCropComplete={(croppedArea, croppedAreaPixels) => {\n                      console.log(\"Crop complete:\", {\n                        croppedArea,\n                        croppedAreaPixels,\n                      });\n                    }}\n                  >\n                    <ImageCrop.CropArea />\n\n                    <ImageCrop.Controls>\n                      <ImageCrop.ZoomSlider />\n                      <ImageCrop.RotateButton direction=\"left\" />\n                      <ImageCrop.RotateButton direction=\"right\" />\n                      <ImageCrop.ResetButton />\n                      <Button\n                        type=\"button\"\n                        size=\"sm\"\n                        onClick={handleCropComplete}\n                      >\n                        Apply Crop\n                      </Button>\n                    </ImageCrop.Controls>\n                  </ImageCrop.Root>\n                ) : (\n                  <div className=\"flex aspect-square w-full max-w-md items-center justify-center rounded-lg border-2 border-muted-foreground/25 border-dashed bg-muted/50 text-muted-foreground\">\n                    <div className=\"text-center\">\n                      <Upload className=\"mx-auto mb-2 h-8 w-8\" />\n                      <p className=\"text-sm\">Upload an image to crop</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}