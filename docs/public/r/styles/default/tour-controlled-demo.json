{
  "name": "tour-controlled-demo",
  "type": "registry:example",
  "dependencies": [
    "@radix-ui/react-slot",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "tour"
  ],
  "files": [
    {
      "path": "examples/tour-controlled-demo.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport * as Tour from \"@/registry/default/ui/tour\";\n\nexport default function TourControlledDemo() {\n  const [open, setOpen] = React.useState(false);\n  const [currentStep, setCurrentStep] = React.useState(0);\n\n  const handleStepChange = (step: number) => {\n    setCurrentStep(step);\n    console.log(`Step changed to: ${step + 1}`);\n  };\n\n  const handleComplete = () => {\n    console.log(\"Tour completed!\");\n    setOpen(false);\n    setCurrentStep(0);\n  };\n\n  const handleSkip = () => {\n    console.log(\"Tour skipped!\");\n    setOpen(false);\n    setCurrentStep(0);\n  };\n\n  const startTour = () => {\n    setCurrentStep(0);\n    setOpen(true);\n  };\n\n  return (\n    <div className=\"flex min-h-[400px] flex-col items-center justify-center gap-8 p-8\">\n      <div className=\"flex flex-col items-center gap-4\">\n        <h1 id=\"controlled-title\" className=\"font-bold text-2xl\">\n          Controlled Tour Example\n        </h1>\n        <p className=\"text-center text-muted-foreground\">\n          This tour demonstrates controlled state management with external step\n          tracking.\n        </p>\n        <div className=\"flex gap-2\">\n          <Button id=\"controlled-start-btn\" onClick={startTour}>\n            Start Controlled Tour\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={() => setCurrentStep(Math.max(0, currentStep - 1))}\n            disabled={!open || currentStep === 0}\n          >\n            External Prev\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={() => setCurrentStep(Math.min(2, currentStep + 1))}\n            disabled={!open || currentStep === 2}\n          >\n            External Next\n          </Button>\n        </div>\n        {open && (\n          <p className=\"text-muted-foreground text-sm\">\n            Current step: {currentStep + 1} / 3\n          </p>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-6\">\n        <div\n          id=\"controlled-step-1\"\n          className=\"rounded-lg border p-6 text-center\"\n        >\n          <h3 className=\"font-semibold\">Step 1</h3>\n          <p className=\"text-muted-foreground text-sm\">\n            First step in our controlled tour\n          </p>\n        </div>\n        <div\n          id=\"controlled-step-2\"\n          className=\"rounded-lg border p-6 text-center\"\n        >\n          <h3 className=\"font-semibold\">Step 2</h3>\n          <p className=\"text-muted-foreground text-sm\">\n            Second step with external controls\n          </p>\n        </div>\n      </div>\n\n      <Tour.Root\n        open={open}\n        onOpenChange={setOpen}\n        currentStep={currentStep}\n        onCurrentStepChange={handleStepChange}\n        onComplete={handleComplete}\n        onSkip={handleSkip}\n        closeOnBackdropClick={true}\n      >\n        <Tour.Backdrop />\n\n        <Tour.Step target=\"#controlled-title\" placement=\"bottom\">\n          <Tour.Content>\n            <Tour.Header>\n              <Tour.Title>Controlled Tour</Tour.Title>\n              <Tour.Description>\n                This tour's state is controlled externally. Notice how the step\n                counter updates.\n              </Tour.Description>\n            </Tour.Header>\n            <Tour.Footer>\n              <div className=\"flex w-full items-center justify-between\">\n                <Tour.StepCounter />\n                <div className=\"flex gap-2\">\n                  <Tour.SkipButton />\n                  <Tour.NextButton />\n                </div>\n              </div>\n            </Tour.Footer>\n            <Tour.CloseButton />\n          </Tour.Content>\n        </Tour.Step>\n\n        <Tour.Step target=\"#controlled-step-1\" placement=\"top\">\n          <Tour.Content>\n            <Tour.Header>\n              <Tour.Title>External Controls</Tour.Title>\n              <Tour.Description>\n                You can control this tour using the external buttons above, or\n                use the built-in navigation.\n              </Tour.Description>\n            </Tour.Header>\n            <Tour.Footer>\n              <div className=\"flex w-full items-center justify-between\">\n                <Tour.StepCounter />\n                <div className=\"flex gap-2\">\n                  <Tour.PrevButton />\n                  <Tour.NextButton />\n                </div>\n              </div>\n            </Tour.Footer>\n            <Tour.CloseButton />\n          </Tour.Content>\n        </Tour.Step>\n\n        <Tour.Step target=\"#controlled-step-2\" placement=\"top\">\n          <Tour.Content>\n            <Tour.Header>\n              <Tour.Title>Final Step</Tour.Title>\n              <Tour.Description>\n                This is the last step. The tour state is fully controlled by the\n                parent component.\n              </Tour.Description>\n            </Tour.Header>\n            <Tour.Footer>\n              <div className=\"flex w-full items-center justify-between\">\n                <Tour.StepCounter />\n                <div className=\"flex gap-2\">\n                  <Tour.PrevButton />\n                  <Tour.NextButton />\n                </div>\n              </div>\n            </Tour.Footer>\n            <Tour.CloseButton />\n          </Tour.Content>\n        </Tour.Step>\n      </Tour.Root>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}