{
  "name": "qr-code",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot",
    "qrcode"
  ],
  "devDependencies": [
    "@types/qrcode"
  ],
  "files": [
    {
      "path": "ui/qr-code.tsx",
      "content": "\"use client\";\n\nimport { Slot } from \"@radix-ui/react-slot\";\nimport * as React from \"react\";\nimport { useComposedRefs } from \"@/lib/compose-refs\";\n\nconst ROOT_NAME = \"QRCode\";\nconst IMAGE_NAME = \"QRCodeImage\";\nconst CANVAS_NAME = \"QRCodeCanvas\";\nconst SVG_NAME = \"QRCodeSvg\";\n\ntype QRCodeLevel = \"L\" | \"M\" | \"Q\" | \"H\";\n\ninterface QRCodeCanvasOptions {\n  errorCorrectionLevel: QRCodeLevel;\n  type?: \"image/png\" | \"image/jpeg\" | \"image/webp\";\n  quality?: number;\n  margin?: number;\n  color?: {\n    dark: string;\n    light: string;\n  };\n  width?: number;\n  rendererOpts?: {\n    quality?: number;\n  };\n}\n\ninterface QRCodeStringOptions {\n  errorCorrectionLevel?: QRCodeLevel;\n  type?: \"svg\" | \"terminal\" | \"utf8\";\n  margin?: number;\n  color?: {\n    dark: string;\n    light: string;\n  };\n  width?: number;\n}\n\nfunction useLazyRef<T>(fn: () => T) {\n  const ref = React.useRef<T | null>(null);\n\n  if (ref.current === null) {\n    ref.current = fn();\n  }\n\n  return ref as React.RefObject<T>;\n}\n\ninterface StoreState {\n  dataUrl: string | null;\n  svgString: string | null;\n  isGenerating: boolean;\n  error: Error | null;\n}\n\ninterface Store {\n  subscribe: (callback: () => void) => () => void;\n  getState: () => StoreState;\n  setState: <K extends keyof StoreState>(key: K, value: StoreState[K]) => void;\n  batchUpdate: (updates: Partial<StoreState>) => void;\n  notify: () => void;\n}\n\ninterface QRCodeContextValue {\n  value: string;\n  size: number;\n  bgColor: string;\n  fgColor: string;\n  level: QRCodeLevel;\n  includeMargin: boolean;\n  marginSize: number;\n  imageSettings?: {\n    src: string;\n    height: number;\n    width: number;\n    excavate?: boolean;\n  };\n  canvasRef: React.RefObject<HTMLCanvasElement | null>;\n  generateQRCode: () => Promise<void>;\n}\n\nfunction createStore(\n  listenersRef: React.RefObject<Set<() => void>>,\n  stateRef: React.RefObject<StoreState>,\n): Store {\n  const store: Store = {\n    subscribe: (cb) => {\n      listenersRef.current.add(cb);\n      return () => listenersRef.current.delete(cb);\n    },\n    getState: () => stateRef.current,\n    setState: (key, value) => {\n      if (Object.is(stateRef.current[key], value)) return;\n      stateRef.current[key] = value;\n      store.notify();\n    },\n    batchUpdate: (updates) => {\n      let hasChanges = false;\n\n      if (\n        updates.dataUrl !== undefined &&\n        !Object.is(stateRef.current.dataUrl, updates.dataUrl)\n      ) {\n        stateRef.current.dataUrl = updates.dataUrl;\n        hasChanges = true;\n      }\n      if (\n        updates.svgString !== undefined &&\n        !Object.is(stateRef.current.svgString, updates.svgString)\n      ) {\n        stateRef.current.svgString = updates.svgString;\n        hasChanges = true;\n      }\n      if (\n        updates.isGenerating !== undefined &&\n        !Object.is(stateRef.current.isGenerating, updates.isGenerating)\n      ) {\n        stateRef.current.isGenerating = updates.isGenerating;\n        hasChanges = true;\n      }\n      if (\n        updates.error !== undefined &&\n        !Object.is(stateRef.current.error, updates.error)\n      ) {\n        stateRef.current.error = updates.error;\n        hasChanges = true;\n      }\n\n      if (hasChanges) {\n        store.notify();\n      }\n    },\n    notify: () => {\n      for (const cb of listenersRef.current) {\n        cb();\n      }\n    },\n  };\n\n  return store;\n}\n\nconst StoreContext = React.createContext<Store | null>(null);\n\nfunction useStoreContext(consumerName: string) {\n  const store = React.useContext(StoreContext);\n  if (!store) {\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${ROOT_NAME}\\``);\n  }\n  return store;\n}\n\nconst QRCodeContext = React.createContext<QRCodeContextValue | null>(null);\n\nfunction useQRCodeContext(consumerName: string) {\n  const context = React.useContext(QRCodeContext);\n  if (!context) {\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${ROOT_NAME}\\``);\n  }\n  return context;\n}\n\nfunction useStore<T>(selector: (state: StoreState) => T): T {\n  const store = useStoreContext(\"useStore\");\n\n  const getSnapshot = React.useCallback(\n    () => selector(store.getState()),\n    [store, selector],\n  );\n\n  return React.useSyncExternalStore(store.subscribe, getSnapshot, getSnapshot);\n}\n\ninterface QRCodeRootProps extends Omit<React.ComponentProps<\"div\">, \"onError\"> {\n  value: string;\n  size?: number;\n  bgColor?: string;\n  fgColor?: string;\n  level?: QRCodeLevel;\n  includeMargin?: boolean;\n  marginSize?: number;\n  imageSettings?: {\n    src: string;\n    height: number;\n    width: number;\n    excavate?: boolean;\n  };\n  onError?: (error: Error) => void;\n  onGenerated?: () => void;\n  asChild?: boolean;\n}\n\nfunction QRCodeRoot(props: QRCodeRootProps) {\n  const {\n    value,\n    size = 200,\n    bgColor = \"#ffffff\",\n    fgColor = \"#000000\",\n    level = \"M\",\n    includeMargin = true,\n    marginSize = 4,\n    imageSettings,\n    onError,\n    onGenerated,\n    asChild,\n    children,\n    ...rootProps\n  } = props;\n\n  const listenersRef = useLazyRef(() => new Set<() => void>());\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n\n  const stateRef = useLazyRef<StoreState>(() => ({\n    dataUrl: null,\n    svgString: null,\n    isGenerating: false,\n    error: null,\n  }));\n\n  const store = React.useMemo(\n    () => createStore(listenersRef, stateRef),\n    [listenersRef, stateRef],\n  );\n\n  const generateQRCode = React.useCallback(async () => {\n    const state = stateRef.current;\n    if (state.isGenerating || !value) return;\n\n    store.batchUpdate({\n      isGenerating: true,\n      error: null,\n    });\n\n    try {\n      const QRCode = (await import(\"qrcode\")).default;\n\n      const canvasOptions: QRCodeCanvasOptions = {\n        errorCorrectionLevel: level,\n        type: \"image/png\",\n        quality: 0.92,\n        margin: includeMargin ? marginSize : 0,\n        color: {\n          dark: fgColor,\n          light: bgColor,\n        },\n        width: size,\n      };\n\n      let dataUrl: string | null = null;\n      if (canvasRef.current) {\n        await QRCode.toCanvas(canvasRef.current, value, canvasOptions);\n        const canvas = canvasRef.current;\n        dataUrl = canvas.toDataURL(\"image/png\");\n      }\n\n      const svgOptions: QRCodeStringOptions = {\n        errorCorrectionLevel: canvasOptions.errorCorrectionLevel,\n        margin: canvasOptions.margin,\n        color: canvasOptions.color,\n        width: canvasOptions.width,\n        type: \"svg\",\n      };\n      const svgString = await QRCode.toString(value, svgOptions);\n\n      store.batchUpdate({\n        dataUrl,\n        svgString,\n        isGenerating: false,\n      });\n\n      onGenerated?.();\n    } catch (error) {\n      const err = error as Error;\n      store.batchUpdate({\n        error: err,\n        isGenerating: false,\n      });\n      onError?.(err);\n    }\n  }, [\n    value,\n    size,\n    bgColor,\n    fgColor,\n    level,\n    includeMargin,\n    marginSize,\n    onError,\n    onGenerated,\n    store,\n    stateRef.current,\n  ]);\n\n  const qrCodeContextValue = React.useMemo<QRCodeContextValue>(\n    () => ({\n      value,\n      size,\n      bgColor,\n      fgColor,\n      level,\n      includeMargin,\n      marginSize,\n      imageSettings,\n      canvasRef,\n      generateQRCode,\n    }),\n    [\n      value,\n      size,\n      bgColor,\n      fgColor,\n      level,\n      includeMargin,\n      marginSize,\n      imageSettings,\n      generateQRCode,\n    ],\n  );\n\n  React.useEffect(() => {\n    if (value) {\n      generateQRCode();\n    }\n  }, [value, generateQRCode]);\n\n  const RootPrimitive = asChild ? Slot : \"div\";\n\n  return (\n    <StoreContext.Provider value={store}>\n      <QRCodeContext.Provider value={qrCodeContextValue}>\n        <RootPrimitive data-slot=\"qr-code\" {...rootProps}>\n          {children}\n        </RootPrimitive>\n      </QRCodeContext.Provider>\n    </StoreContext.Provider>\n  );\n}\n\ninterface QRCodeImageProps extends React.ComponentProps<\"img\"> {\n  alt?: string;\n  asChild?: boolean;\n}\n\nfunction QRCodeImage(props: QRCodeImageProps) {\n  const { alt = \"QR Code\", asChild, ref, ...imageProps } = props;\n\n  const context = useQRCodeContext(IMAGE_NAME);\n  const dataUrl = useStore((state) => state.dataUrl);\n\n  if (!dataUrl) return null;\n\n  const ImagePrimitive = asChild ? Slot : \"img\";\n\n  return (\n    <ImagePrimitive\n      src={dataUrl}\n      alt={alt}\n      width={context.size}\n      height={context.size}\n      data-slot=\"qr-code-image\"\n      ref={ref}\n      {...imageProps}\n    />\n  );\n}\n\ninterface QRCodeCanvasProps extends React.ComponentProps<\"canvas\"> {\n  asChild?: boolean;\n}\n\nfunction QRCodeCanvas(props: QRCodeCanvasProps) {\n  const { asChild, ref, ...canvasProps } = props;\n\n  const context = useQRCodeContext(CANVAS_NAME);\n\n  const composedRef = useComposedRefs(ref, context.canvasRef);\n\n  const CanvasPrimitive = asChild ? Slot : \"canvas\";\n\n  return (\n    <CanvasPrimitive\n      ref={composedRef}\n      width={context.size}\n      height={context.size}\n      data-slot=\"qr-code-canvas\"\n      {...canvasProps}\n    />\n  );\n}\n\ninterface QRCodeSvgProps extends React.ComponentProps<\"div\"> {\n  asChild?: boolean;\n}\n\nfunction QRCodeSvg(props: QRCodeSvgProps) {\n  const { asChild, ref, ...svgProps } = props;\n\n  const context = useQRCodeContext(SVG_NAME);\n  const svgString = useStore((state) => state.svgString);\n\n  if (!svgString) return null;\n\n  const SvgPrimitive = asChild ? Slot : \"div\";\n\n  return (\n    <SvgPrimitive\n      data-slot=\"qr-code-svg\"\n      style={{ width: context.size, height: context.size }}\n      dangerouslySetInnerHTML={{ __html: svgString }}\n      ref={ref}\n      {...svgProps}\n    />\n  );\n}\n\ninterface QRCodeDownloadProps extends React.ComponentProps<\"button\"> {\n  filename?: string;\n  format?: \"png\" | \"svg\";\n  asChild?: boolean;\n}\n\nfunction QRCodeDownload(props: QRCodeDownloadProps) {\n  const {\n    filename = \"qrcode\",\n    format = \"png\",\n    asChild,\n\n    children,\n    ref,\n    ...buttonProps\n  } = props;\n\n  const dataUrl = useStore((state) => state.dataUrl);\n  const svgString = useStore((state) => state.svgString);\n\n  const onClick = React.useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      buttonProps.onClick?.(event);\n      if (event.defaultPrevented) return;\n\n      const link = document.createElement(\"a\");\n\n      if (format === \"png\" && dataUrl) {\n        link.href = dataUrl;\n        link.download = `${filename}.png`;\n      } else if (format === \"svg\" && svgString) {\n        const blob = new Blob([svgString], { type: \"image/svg+xml\" });\n        link.href = URL.createObjectURL(blob);\n        link.download = `${filename}.svg`;\n      } else {\n        return;\n      }\n\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      if (format === \"svg\" && svgString) {\n        URL.revokeObjectURL(link.href);\n      }\n    },\n    [dataUrl, svgString, filename, format, buttonProps.onClick],\n  );\n\n  const ButtonPrimitive = asChild ? Slot : \"button\";\n\n  return (\n    <ButtonPrimitive\n      type=\"button\"\n      data-slot=\"qr-code-download\"\n      ref={ref}\n      {...buttonProps}\n      onClick={onClick}\n    >\n      {children ?? `Download ${format.toUpperCase()}`}\n    </ButtonPrimitive>\n  );\n}\n\nexport {\n  QRCodeRoot as Root,\n  QRCodeImage as Image,\n  QRCodeCanvas as Canvas,\n  QRCodeSvg as Svg,\n  QRCodeDownload as Download,\n  //\n  QRCodeRoot as QRCode,\n  QRCodeImage,\n  QRCodeCanvas,\n  QRCodeSvg,\n  QRCodeDownload,\n  //\n  useStore as useQRCode,\n  //\n  type QRCodeRootProps as QRCodeProps,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}