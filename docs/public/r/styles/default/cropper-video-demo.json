{
  "name": "cropper-video-demo",
  "type": "registry:example",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "button",
    "label",
    "select"
  ],
  "files": [
    {
      "path": "examples/cropper-video-demo.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Cropper,\n  CropperArea,\n  CropperContent,\n  type CropperPoint,\n  CropperVideo,\n} from \"@/registry/default/ui/cropper\";\n\nconst aspectRatios = [\n  { label: \"Square (1:1)\", value: 1 },\n  { label: \"Portrait (4:5)\", value: 4 / 5 },\n  { label: \"Landscape (16:9)\", value: 16 / 9 },\n  { label: \"Cinema (21:9)\", value: 21 / 9 },\n] as const;\n\nexport default function CropperVideoDemo() {\n  const [crop, setCrop] = React.useState<CropperPoint>({ x: 0, y: 0 });\n  const [zoom, setZoom] = React.useState(1);\n  const [aspectRatio, setAspectRatio] = React.useState(16 / 9);\n  const [isPlaying, setIsPlaying] = React.useState(true);\n  const videoRef = React.useRef<HTMLVideoElement>(null);\n\n  const togglePlayback = () => {\n    if (videoRef.current) {\n      if (isPlaying) {\n        videoRef.current.pause();\n      } else {\n        videoRef.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex flex-wrap items-center gap-4\">\n        <div className=\"flex items-center gap-2\">\n          <Label htmlFor=\"aspect-ratio\">Aspect Ratio:</Label>\n          <Select\n            value={aspectRatio.toString()}\n            onValueChange={(value) => setAspectRatio(Number(value))}\n          >\n            <SelectTrigger id=\"aspect-ratio\" className=\"w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {aspectRatios.map((ratio) => (\n                <SelectItem key={ratio.value} value={ratio.value.toString()}>\n                  {ratio.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <Button onClick={togglePlayback} variant=\"outline\" size=\"sm\">\n          {isPlaying ? \"Pause\" : \"Play\"}\n        </Button>\n      </div>\n\n      <Cropper\n        aspectRatio={aspectRatio}\n        crop={crop}\n        zoom={zoom}\n        onCropChange={setCrop}\n        onZoomChange={setZoom}\n        className=\"min-h-96 max-w-4xl\"\n        objectFit=\"cover\"\n        withGrid\n      >\n        <CropperContent>\n          <CropperVideo\n            ref={videoRef}\n            src=\"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\"\n            crossOrigin=\"anonymous\"\n            onLoadedMetadata={() => {\n              if (videoRef.current && isPlaying) {\n                videoRef.current.play();\n              }\n            }}\n          />\n          <CropperArea />\n        </CropperContent>\n      </Cropper>\n\n      <div className=\"text-muted-foreground text-sm\">\n        <p>• Drag to pan the video</p>\n        <p>• Scroll to zoom in/out</p>\n        <p>• Use keyboard arrows for precise positioning</p>\n        <p>• Pinch on touch devices for zoom and rotation</p>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}