{
  "name": "kbd",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/kbd.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport * as React from \"react\";\n\nconst ROOT_NAME = \"Kbd\";\nconst SEPARATOR_NAME = \"KbdSeparator\";\nconst KEY_NAME = \"KbdKey\";\n\nconst KBD_ERROR = {\n  [ROOT_NAME]: `\\`${ROOT_NAME}\\` components must be within \\`${ROOT_NAME}\\``,\n  [SEPARATOR_NAME]: `\\`${SEPARATOR_NAME}\\` must be within \\`${ROOT_NAME}\\``,\n  [KEY_NAME]: `\\`${KEY_NAME}\\` must be within \\`${ROOT_NAME}\\``,\n} as const;\n\ninterface KbdContextValue {\n  size?: \"default\" | \"sm\" | \"lg\";\n  variant?: \"default\" | \"outline\" | \"ghost\";\n}\n\nconst KbdContext = React.createContext<KbdContextValue | null>(null);\nKbdContext.displayName = ROOT_NAME;\n\nfunction useKbdContext(name: keyof typeof KBD_ERROR) {\n  const context = React.useContext(KbdContext);\n  if (!context) {\n    throw new Error(KBD_ERROR[name]);\n  }\n  return context;\n}\n\ninterface KbdRootProps\n  extends KbdContextValue,\n    React.ComponentPropsWithoutRef<\"kbd\"> {\n  asChild?: boolean;\n}\n\nconst KbdRoot = React.forwardRef<HTMLElement, KbdRootProps>(\n  (props, forwardedRef) => {\n    const {\n      size = \"default\",\n      variant = \"default\",\n      asChild,\n      className,\n      ...rootProps\n    } = props;\n\n    const contextValue = React.useMemo<KbdContextValue>(\n      () => ({\n        size,\n        variant,\n      }),\n      [size, variant],\n    );\n\n    const RootSlot = asChild ? Slot : \"kbd\";\n\n    return (\n      <KbdContext.Provider value={contextValue}>\n        <RootSlot\n          role=\"group\"\n          data-slot=\"kbd\"\n          {...rootProps}\n          ref={forwardedRef}\n          className={cn(\n            \"inline-flex w-fit items-center gap-1 font-medium font-mono text-[10px] text-foreground/70 sm:text-[11px]\",\n            size === \"default\" && \"h-6 rounded px-1.5\",\n            size === \"sm\" && \"h-5 rounded-sm px-1\",\n            size === \"lg\" && \"h-7 rounded-md px-2\",\n            variant === \"default\" && \"bg-accent\",\n            variant === \"outline\" && \"bg-background px-0\",\n            variant === \"ghost\" && \"bg-transparent shadow-none\",\n            className,\n          )}\n        />\n      </KbdContext.Provider>\n    );\n  },\n);\nKbdRoot.displayName = ROOT_NAME;\n\nconst KEY_DESCRIPTIONS: Record<string, string> = {\n  \"⌘\": \"Command\",\n  \"⇧\": \"Shift\",\n  \"⌥\": \"Option\",\n  \"⌃\": \"Control\",\n  Ctrl: \"Control\",\n  \"⌫\": \"Backspace\",\n  \"⎋\": \"Escape\",\n  \"↩\": \"Return\",\n  \"⇥\": \"Tab\",\n  \"⌤\": \"Enter\",\n  \"↑\": \"Arrow Up\",\n  \"↓\": \"Arrow Down\",\n  \"←\": \"Arrow Left\",\n  \"→\": \"Arrow Right\",\n  \"⇪\": \"Caps Lock\",\n  fn: \"Function\",\n  \"⌦\": \"Delete\",\n  \"⇞\": \"Page Up\",\n  \"⇟\": \"Page Down\",\n  \"↖\": \"Home\",\n  \"↘\": \"End\",\n  \"↕\": \"Page Up/Down\",\n  \"↔\": \"Left/Right\",\n} as const;\n\ninterface KbdKeyProps extends React.ComponentPropsWithoutRef<\"span\"> {\n  asChild?: boolean;\n  description?: string;\n}\n\nconst KbdKey = React.forwardRef<HTMLSpanElement, KbdKeyProps>(\n  (props, forwardedRef) => {\n    const { asChild, className, children, description, ...keyProps } = props;\n    const context = useKbdContext(KEY_NAME);\n\n    const KeySlot = asChild ? Slot : \"span\";\n\n    const keyText = children?.toString() ?? \"\";\n    const keyDescription = description ?? KEY_DESCRIPTIONS[keyText] ?? keyText;\n\n    const Inner = (\n      <span\n        className={cn(\n          \"inline-flex items-center justify-center rounded\",\n          context.variant === \"outline\" &&\n            \"min-w-[20px] border border-border bg-muted/30 px-1.5 shadow-xs\",\n          className,\n        )}\n      >\n        {children}\n      </span>\n    );\n\n    if (asChild) {\n      return (\n        <KeySlot\n          role=\"presentation\"\n          aria-label={keyDescription}\n          data-slot=\"kbd-key\"\n          {...keyProps}\n          ref={forwardedRef}\n        >\n          {Inner}\n        </KeySlot>\n      );\n    }\n\n    return (\n      <abbr\n        title={keyDescription}\n        {...keyProps}\n        ref={forwardedRef}\n        className=\"no-underline\"\n      >\n        {Inner}\n      </abbr>\n    );\n  },\n);\nKbdKey.displayName = KEY_NAME;\n\ninterface KbdSeparatorProps extends React.ComponentPropsWithoutRef<\"span\"> {\n  asChild?: boolean;\n}\n\nconst KbdSeparator = React.forwardRef<HTMLSpanElement, KbdSeparatorProps>(\n  (props, forwardedRef) => {\n    const { asChild, children = \"+\", className, ...separatorProps } = props;\n    useKbdContext(SEPARATOR_NAME);\n\n    const SeparatorSlot = asChild ? Slot : \"span\";\n\n    return (\n      <SeparatorSlot\n        role=\"separator\"\n        aria-orientation=\"horizontal\"\n        aria-hidden=\"true\"\n        data-slot=\"kbd-separator\"\n        {...separatorProps}\n        ref={forwardedRef}\n        className={cn(\"text-foreground/70\", className)}\n      >\n        {children}\n      </SeparatorSlot>\n    );\n  },\n);\nKbdSeparator.displayName = SEPARATOR_NAME;\n\nconst Kbd = KbdRoot;\nconst Root = KbdRoot;\nconst Key = KbdKey;\nconst Separator = KbdSeparator;\n\nexport {\n  Kbd,\n  KbdKey,\n  KbdSeparator,\n  //\n  Root,\n  Key,\n  Separator,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}