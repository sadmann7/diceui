{
  "name": "kbd",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/kbd.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nconst kbdVariants = cva(\n  \"inline-flex w-fit items-center gap-1 font-medium font-mono text-[10px] text-foreground/70 sm:text-[11px]\",\n  {\n    variants: {\n      size: {\n        default: \"h-6 rounded px-1.5\",\n        sm: \"h-5 rounded-sm px-1\",\n        lg: \"h-7 rounded-md px-2\",\n      },\n      variant: {\n        default: \"bg-accent\",\n        outline:\n          \"bg-background px-0 [&_[data-slot='kbd-key']]:min-w-[20px] [&_[data-slot='kbd-key']]:border [&_[data-slot='kbd-key']]:border-border [&_[data-slot='kbd-key']]:bg-muted/30 [&_[data-slot='kbd-key']]:px-1.5 [&_[data-slot='kbd-key']]:shadow-xs\",\n        ghost: \"bg-transparent shadow-none\",\n      },\n    },\n    defaultVariants: {\n      size: \"default\",\n      variant: \"default\",\n    },\n  },\n);\n\ninterface KbdRootProps\n  extends React.ComponentPropsWithoutRef<\"kbd\">,\n    VariantProps<typeof kbdVariants> {\n  asChild?: boolean;\n}\n\nconst KbdRoot = React.forwardRef<HTMLElement, KbdRootProps>(\n  (props, forwardedRef) => {\n    const {\n      variant = \"default\",\n      size = \"default\",\n      asChild,\n      className,\n      ...rootProps\n    } = props;\n\n    const RootSlot = asChild ? Slot : \"kbd\";\n\n    return (\n      <RootSlot\n        role=\"group\"\n        data-slot=\"kbd\"\n        {...rootProps}\n        ref={forwardedRef}\n        className={cn(kbdVariants({ size, variant, className }))}\n      />\n    );\n  },\n);\nKbdRoot.displayName = \"KbdRoot\";\n\nconst KEY_DESCRIPTIONS: Record<string, string> = {\n  \"⌘\": \"Command\",\n  \"⇧\": \"Shift\",\n  \"⌥\": \"Option\",\n  \"⌃\": \"Control\",\n  Ctrl: \"Control\",\n  \"⌫\": \"Backspace\",\n  \"⎋\": \"Escape\",\n  \"↩\": \"Return\",\n  \"⇥\": \"Tab\",\n  \"⌤\": \"Enter\",\n  \"↑\": \"Arrow Up\",\n  \"↓\": \"Arrow Down\",\n  \"←\": \"Arrow Left\",\n  \"→\": \"Arrow Right\",\n  \"⇪\": \"Caps Lock\",\n  fn: \"Function\",\n  \"⌦\": \"Delete\",\n  \"⇞\": \"Page Up\",\n  \"⇟\": \"Page Down\",\n  \"↖\": \"Home\",\n  \"↘\": \"End\",\n  \"↕\": \"Page Up/Down\",\n  \"↔\": \"Left/Right\",\n} as const;\n\ninterface KbdKeyProps extends React.ComponentPropsWithoutRef<\"span\"> {\n  asChild?: boolean;\n}\n\nconst KbdKey = React.forwardRef<HTMLSpanElement, KbdKeyProps>(\n  (props, forwardedRef) => {\n    const {\n      asChild,\n      className,\n      children,\n      title: titleProp,\n      ...keyProps\n    } = props;\n\n    const KeySlot = asChild ? Slot : \"span\";\n\n    const keyText = children?.toString() ?? \"\";\n    const title = titleProp ?? KEY_DESCRIPTIONS[keyText] ?? keyText;\n\n    return (\n      <abbr title={title} className=\"no-underline\">\n        <KeySlot\n          data-slot=\"kbd-key\"\n          {...keyProps}\n          ref={forwardedRef}\n          className={cn(\n            \"inline-flex items-center justify-center rounded\",\n            className,\n          )}\n        >\n          {children}\n        </KeySlot>\n      </abbr>\n    );\n  },\n);\nKbdKey.displayName = \"KbdKey\";\n\ninterface KbdSeparatorProps extends React.ComponentPropsWithoutRef<\"span\"> {\n  asChild?: boolean;\n}\n\nconst KbdSeparator = React.forwardRef<HTMLSpanElement, KbdSeparatorProps>(\n  (props, forwardedRef) => {\n    const { asChild, children = \"+\", className, ...separatorProps } = props;\n\n    const SeparatorSlot = asChild ? Slot : \"span\";\n\n    return (\n      <SeparatorSlot\n        role=\"separator\"\n        aria-orientation=\"horizontal\"\n        aria-hidden=\"true\"\n        data-slot=\"kbd-separator\"\n        {...separatorProps}\n        ref={forwardedRef}\n        className={cn(\"text-foreground/70\", className)}\n      >\n        {children}\n      </SeparatorSlot>\n    );\n  },\n);\nKbdSeparator.displayName = \"KbdSeparator\";\n\nconst Kbd = KbdRoot;\nconst Root = KbdRoot;\nconst Key = KbdKey;\nconst Separator = KbdSeparator;\n\nexport {\n  Kbd,\n  KbdKey,\n  KbdSeparator,\n  //\n  Root,\n  Key,\n  Separator,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}