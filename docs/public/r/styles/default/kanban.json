{
  "name": "kanban",
  "type": "registry:ui",
  "dependencies": [
    "@dnd-kit/core",
    "@dnd-kit/modifiers",
    "@dnd-kit/sortable",
    "@dnd-kit/utilities",
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/kanban.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  type Announcements,\r\n  type CollisionDetection,\r\n  DndContext,\r\n  type DndContextProps,\r\n  type DragCancelEvent,\r\n  type DragEndEvent,\r\n  type DragOverEvent,\r\n  DragOverlay,\r\n  type DragStartEvent,\r\n  type DraggableAttributes,\r\n  type DraggableSyntheticListeners,\r\n  type DropAnimation,\r\n  type DroppableContainer,\r\n  KeyboardCode,\r\n  type KeyboardCoordinateGetter,\r\n  KeyboardSensor,\r\n  MeasuringStrategy,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  type UniqueIdentifier,\r\n  closestCenter,\r\n  closestCorners,\r\n  defaultDropAnimationSideEffects,\r\n  getFirstCollision,\r\n  pointerWithin,\r\n  rectIntersection,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport {\r\n  type AnimateLayoutChanges,\r\n  SortableContext,\r\n  type SortableContextProps,\r\n  arrayMove,\r\n  defaultAnimateLayoutChanges,\r\n  horizontalListSortingStrategy,\r\n  useSortable,\r\n  verticalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { useComposedRefs } from \"@/lib/composition\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst directions: string[] = [\r\n  KeyboardCode.Down,\r\n  KeyboardCode.Right,\r\n  KeyboardCode.Up,\r\n  KeyboardCode.Left,\r\n];\r\n\r\nconst coordinateGetter: KeyboardCoordinateGetter = (event, { context }) => {\r\n  const { active, droppableRects, droppableContainers, collisionRect } =\r\n    context;\r\n\r\n  if (directions.includes(event.code)) {\r\n    event.preventDefault();\r\n\r\n    if (!active || !collisionRect) return;\r\n\r\n    const filteredContainers: DroppableContainer[] = [];\r\n\r\n    for (const entry of droppableContainers.getEnabled()) {\r\n      if (!entry || entry?.disabled) return;\r\n\r\n      const rect = droppableRects.get(entry.id);\r\n\r\n      if (!rect) return;\r\n\r\n      const data = entry.data.current;\r\n\r\n      if (data) {\r\n        const { type, children } = data;\r\n\r\n        if (type === \"container\" && children?.length > 0) {\r\n          if (active.data.current?.type !== \"container\") {\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      switch (event.code) {\r\n        case KeyboardCode.Down:\r\n          if (collisionRect.top < rect.top) {\r\n            filteredContainers.push(entry);\r\n          }\r\n          break;\r\n        case KeyboardCode.Up:\r\n          if (collisionRect.top > rect.top) {\r\n            filteredContainers.push(entry);\r\n          }\r\n          break;\r\n        case KeyboardCode.Left:\r\n          if (collisionRect.left >= rect.left + rect.width) {\r\n            filteredContainers.push(entry);\r\n          }\r\n          break;\r\n        case KeyboardCode.Right:\r\n          if (collisionRect.left + collisionRect.width <= rect.left) {\r\n            filteredContainers.push(entry);\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    const collisions = closestCorners({\r\n      active,\r\n      collisionRect: collisionRect,\r\n      droppableRects,\r\n      droppableContainers: filteredContainers,\r\n      pointerCoordinates: null,\r\n    });\r\n    const closestId = getFirstCollision(collisions, \"id\");\r\n\r\n    if (closestId != null) {\r\n      const newDroppable = droppableContainers.get(closestId);\r\n      const newNode = newDroppable?.node.current;\r\n      const newRect = newDroppable?.rect.current;\r\n\r\n      if (newNode && newRect) {\r\n        if (newDroppable.id === \"placeholder\") {\r\n          return {\r\n            x: newRect.left + (newRect.width - collisionRect.width) / 2,\r\n            y: newRect.top + (newRect.height - collisionRect.height) / 2,\r\n          };\r\n        }\r\n\r\n        if (newDroppable.data.current?.type === \"container\") {\r\n          return {\r\n            x: newRect.left + 20,\r\n            y: newRect.top + 74,\r\n          };\r\n        }\r\n\r\n        return {\r\n          x: newRect.left,\r\n          y: newRect.top,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nconst ROOT_NAME = \"Kanban\";\r\nconst BOARD_NAME = \"KanbanBoard\";\r\nconst COLUMN_NAME = \"KanbanColumn\";\r\nconst COLUMN_HANDLE_NAME = \"KanbanColumnHandle\";\r\nconst ITEM_NAME = \"KanbanItem\";\r\nconst ITEM_HANDLE_NAME = \"KanbanItemHandle\";\r\nconst OVERLAY_NAME = \"KanbanOverlay\";\r\n\r\nconst KANBAN_ERRORS = {\r\n  [ROOT_NAME]: `\\`${ROOT_NAME}\\` components must be within \\`${ROOT_NAME}\\``,\r\n  [BOARD_NAME]: `\\`${BOARD_NAME}\\` must be within \\`${ROOT_NAME}\\``,\r\n  [COLUMN_NAME]: `\\`${COLUMN_NAME}\\` must be within \\`${BOARD_NAME}\\``,\r\n  [COLUMN_HANDLE_NAME]: `\\`${COLUMN_HANDLE_NAME}\\` must be within \\`${COLUMN_NAME}\\``,\r\n  [ITEM_NAME]: `\\`${ITEM_NAME}\\` must be within \\`${COLUMN_NAME}\\``,\r\n  [ITEM_HANDLE_NAME]: `\\`${ITEM_HANDLE_NAME}\\` must be within \\`${ITEM_NAME}\\``,\r\n  [OVERLAY_NAME]: `\\`${OVERLAY_NAME}\\` must be within \\`${ROOT_NAME}\\``,\r\n} as const;\r\n\r\ninterface KanbanContextValue<T> {\r\n  id: string;\r\n  items: Record<UniqueIdentifier, T[]>;\r\n  modifiers: DndContextProps[\"modifiers\"];\r\n  strategy: SortableContextProps[\"strategy\"];\r\n  orientation: \"horizontal\" | \"vertical\";\r\n  activeId: UniqueIdentifier | null;\r\n  setActiveId: (id: UniqueIdentifier | null) => void;\r\n  getItemValue: (item: T) => UniqueIdentifier;\r\n  flatCursor: boolean;\r\n}\r\n\r\nconst KanbanContext = React.createContext<KanbanContextValue<unknown> | null>(\r\n  null,\r\n);\r\nKanbanContext.displayName = ROOT_NAME;\r\n\r\nfunction useKanbanContext(name: keyof typeof KANBAN_ERRORS) {\r\n  const context = React.useContext(KanbanContext);\r\n  if (!context) {\r\n    throw new Error(KANBAN_ERRORS[name]);\r\n  }\r\n  return context;\r\n}\r\n\r\ninterface GetItemValue<T> {\r\n  /**\r\n   * Callback that returns a unique identifier for each kanban item. Required for array of objects.\r\n   * @example getItemValue={(item) => item.id}\r\n   */\r\n  getItemValue: (item: T) => UniqueIdentifier;\r\n}\r\n\r\ntype KanbanProps<T> = Omit<DndContextProps, \"collisionDetection\"> &\r\n  GetItemValue<T> & {\r\n    value: Record<UniqueIdentifier, T[]>;\r\n    onValueChange?: (columns: Record<UniqueIdentifier, T[]>) => void;\r\n    onMove?: (\r\n      event: DragEndEvent & { activeIndex: number; overIndex: number },\r\n    ) => void;\r\n    strategy?: SortableContextProps[\"strategy\"];\r\n    orientation?: \"horizontal\" | \"vertical\";\r\n    flatCursor?: boolean;\r\n  } & (T extends object ? GetItemValue<T> : Partial<GetItemValue<T>>);\r\n\r\nfunction Kanban<T>(props: KanbanProps<T>) {\r\n  const {\r\n    value,\r\n    onValueChange,\r\n    modifiers,\r\n    strategy = verticalListSortingStrategy,\r\n    orientation = \"horizontal\",\r\n    onMove,\r\n    getItemValue: getItemValueProp,\r\n    accessibility,\r\n    flatCursor = false,\r\n    ...kanbanProps\r\n  } = props;\r\n\r\n  const id = React.useId();\r\n  const [activeId, setActiveId] = React.useState<UniqueIdentifier | null>(null);\r\n  const lastOverIdRef = React.useRef<UniqueIdentifier | null>(null);\r\n  const hasMovedRef = React.useRef(false);\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor),\r\n    useSensor(TouchSensor),\r\n    useSensor(KeyboardSensor, {\r\n      coordinateGetter,\r\n    }),\r\n  );\r\n\r\n  const getItemValue = React.useCallback(\r\n    (item: T): UniqueIdentifier => {\r\n      if (typeof item === \"object\" && !getItemValueProp) {\r\n        throw new Error(\"getItemValue is required when using array of objects\");\r\n      }\r\n      return getItemValueProp\r\n        ? getItemValueProp(item)\r\n        : (item as UniqueIdentifier);\r\n    },\r\n    [getItemValueProp],\r\n  );\r\n\r\n  const getColumn = React.useCallback(\r\n    (id: UniqueIdentifier) => {\r\n      if (id in value) return id;\r\n\r\n      for (const [columnId, items] of Object.entries(value)) {\r\n        if (items.some((item) => getItemValue(item) === id)) {\r\n          return columnId;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    },\r\n    [value, getItemValue],\r\n  );\r\n\r\n  const collisionDetection: CollisionDetection = React.useCallback(\r\n    (args) => {\r\n      if (activeId && activeId in value) {\r\n        return closestCenter({\r\n          ...args,\r\n          droppableContainers: args.droppableContainers.filter(\r\n            (container) => container.id in value,\r\n          ),\r\n        });\r\n      }\r\n\r\n      const pointerIntersections = pointerWithin(args);\r\n      const intersections =\r\n        pointerIntersections.length > 0\r\n          ? pointerIntersections\r\n          : rectIntersection(args);\r\n      let overId = getFirstCollision(intersections, \"id\");\r\n\r\n      if (!overId) {\r\n        if (hasMovedRef.current) {\r\n          lastOverIdRef.current = activeId;\r\n        }\r\n        return lastOverIdRef.current ? [{ id: lastOverIdRef.current }] : [];\r\n      }\r\n\r\n      if (overId in value) {\r\n        const containerItems = value[overId];\r\n        if (containerItems && containerItems.length > 0) {\r\n          const closestItem = closestCenter({\r\n            ...args,\r\n            droppableContainers: args.droppableContainers.filter(\r\n              (container) =>\r\n                container.id !== overId &&\r\n                containerItems.some(\r\n                  (item) => getItemValue(item) === container.id,\r\n                ),\r\n            ),\r\n          });\r\n\r\n          if (closestItem.length > 0) {\r\n            overId = closestItem[0]?.id ?? overId;\r\n          }\r\n        }\r\n      }\r\n\r\n      lastOverIdRef.current = overId;\r\n      return [{ id: overId }];\r\n    },\r\n    [activeId, value, getItemValue],\r\n  );\r\n\r\n  const onDragStart = React.useCallback(\r\n    (event: DragStartEvent) => {\r\n      kanbanProps.onDragStart?.(event);\r\n\r\n      if (event.activatorEvent.defaultPrevented) return;\r\n      setActiveId(event.active.id);\r\n    },\r\n    [kanbanProps.onDragStart],\r\n  );\r\n\r\n  const onDragOver = React.useCallback(\r\n    (event: DragOverEvent) => {\r\n      kanbanProps.onDragOver?.(event);\r\n\r\n      if (event.activatorEvent.defaultPrevented) return;\r\n\r\n      const { active, over } = event;\r\n      if (!over) return;\r\n\r\n      const activeColumn = getColumn(active.id);\r\n      const overColumn = getColumn(over.id);\r\n\r\n      if (!activeColumn || !overColumn) return;\r\n\r\n      if (activeColumn === overColumn) {\r\n        const items = value[activeColumn];\r\n        if (!items) return;\r\n\r\n        const activeIndex = items.findIndex(\r\n          (item) => getItemValue(item) === active.id,\r\n        );\r\n        const overIndex = items.findIndex(\r\n          (item) => getItemValue(item) === over.id,\r\n        );\r\n\r\n        if (activeIndex !== overIndex) {\r\n          const newColumns = { ...value };\r\n          newColumns[activeColumn] = arrayMove(items, activeIndex, overIndex);\r\n          onValueChange?.(newColumns);\r\n        }\r\n      } else {\r\n        const activeItems = value[activeColumn];\r\n        const overItems = value[overColumn];\r\n\r\n        if (!activeItems || !overItems) return;\r\n\r\n        const activeIndex = activeItems.findIndex(\r\n          (item) => getItemValue(item) === active.id,\r\n        );\r\n\r\n        if (activeIndex === -1) return;\r\n\r\n        const activeItem = activeItems[activeIndex];\r\n        if (!activeItem) return;\r\n\r\n        const updatedItems = {\r\n          ...value,\r\n          [activeColumn]: activeItems.filter(\r\n            (item) => getItemValue(item) !== active.id,\r\n          ),\r\n          [overColumn]: [...overItems, activeItem],\r\n        };\r\n\r\n        onValueChange?.(updatedItems);\r\n        hasMovedRef.current = true;\r\n      }\r\n    },\r\n    [value, getColumn, getItemValue, onValueChange, kanbanProps.onDragOver],\r\n  );\r\n\r\n  const onDragEnd = React.useCallback(\r\n    (event: DragEndEvent) => {\r\n      kanbanProps.onDragEnd?.(event);\r\n\r\n      if (event.activatorEvent.defaultPrevented) return;\r\n\r\n      const { active, over } = event;\r\n\r\n      if (!over) {\r\n        setActiveId(null);\r\n        return;\r\n      }\r\n\r\n      if (active.id in value && over.id in value) {\r\n        const activeIndex = Object.keys(value).indexOf(active.id as string);\r\n        const overIndex = Object.keys(value).indexOf(over.id as string);\r\n\r\n        if (activeIndex !== overIndex) {\r\n          const orderedColumns = Object.keys(value);\r\n          const newOrder = arrayMove(orderedColumns, activeIndex, overIndex);\r\n\r\n          const newColumns: Record<UniqueIdentifier, T[]> = {};\r\n          for (const key of newOrder) {\r\n            const items = value[key];\r\n            if (items) {\r\n              newColumns[key] = items;\r\n            }\r\n          }\r\n\r\n          if (onMove) {\r\n            onMove({ ...event, activeIndex, overIndex });\r\n          } else {\r\n            onValueChange?.(newColumns);\r\n          }\r\n        }\r\n      } else {\r\n        const activeColumn = getColumn(active.id);\r\n        const overColumn = getColumn(over.id);\r\n\r\n        if (!activeColumn || !overColumn) {\r\n          setActiveId(null);\r\n          return;\r\n        }\r\n\r\n        if (activeColumn === overColumn) {\r\n          const items = value[activeColumn];\r\n          if (!items) {\r\n            setActiveId(null);\r\n            return;\r\n          }\r\n\r\n          const activeIndex = items.findIndex(\r\n            (item) => getItemValue(item) === active.id,\r\n          );\r\n          const overIndex = items.findIndex(\r\n            (item) => getItemValue(item) === over.id,\r\n          );\r\n\r\n          if (activeIndex !== overIndex) {\r\n            const newColumns = { ...value };\r\n            newColumns[activeColumn] = arrayMove(items, activeIndex, overIndex);\r\n            if (onMove) {\r\n              onMove({\r\n                ...event,\r\n                activeIndex,\r\n                overIndex,\r\n              });\r\n            } else {\r\n              onValueChange?.(newColumns);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      setActiveId(null);\r\n      hasMovedRef.current = false;\r\n    },\r\n    [\r\n      value,\r\n      getColumn,\r\n      getItemValue,\r\n      onValueChange,\r\n      onMove,\r\n      kanbanProps.onDragEnd,\r\n    ],\r\n  );\r\n\r\n  const onDragCancel = React.useCallback(\r\n    (event: DragCancelEvent) => {\r\n      kanbanProps.onDragCancel?.(event);\r\n\r\n      if (event.activatorEvent.defaultPrevented) return;\r\n\r\n      setActiveId(null);\r\n      hasMovedRef.current = false;\r\n    },\r\n    [kanbanProps.onDragCancel],\r\n  );\r\n\r\n  const announcements: Announcements = React.useMemo(\r\n    () => ({\r\n      onDragStart({ active }) {\r\n        const isColumn = active.id in value;\r\n        const itemType = isColumn ? \"column\" : \"item\";\r\n        const position = isColumn\r\n          ? Object.keys(value).indexOf(active.id as string) + 1\r\n          : (() => {\r\n              const column = getColumn(active.id);\r\n              if (!column || !value[column]) return 1;\r\n              return (\r\n                value[column].findIndex(\r\n                  (item) => getItemValue(item) === active.id,\r\n                ) + 1\r\n              );\r\n            })();\r\n        const total = isColumn\r\n          ? Object.keys(value).length\r\n          : (() => {\r\n              const column = getColumn(active.id);\r\n              return column ? (value[column]?.length ?? 0) : 0;\r\n            })();\r\n\r\n        return `Picked up ${itemType} at position ${position} of ${total}`;\r\n      },\r\n      onDragOver({ active, over }) {\r\n        if (!over) return;\r\n\r\n        const isColumn = active.id in value;\r\n        const itemType = isColumn ? \"column\" : \"item\";\r\n        const position = isColumn\r\n          ? Object.keys(value).indexOf(over.id as string) + 1\r\n          : (() => {\r\n              const column = getColumn(over.id);\r\n              if (!column || !value[column]) return 1;\r\n              return (\r\n                value[column].findIndex(\r\n                  (item) => getItemValue(item) === over.id,\r\n                ) + 1\r\n              );\r\n            })();\r\n        const total = isColumn\r\n          ? Object.keys(value).length\r\n          : (() => {\r\n              const column = getColumn(over.id);\r\n              return column ? (value[column]?.length ?? 0) : 0;\r\n            })();\r\n\r\n        const overColumn = getColumn(over.id);\r\n        const activeColumn = getColumn(active.id);\r\n\r\n        if (isColumn) {\r\n          return `${itemType} is now at position ${position} of ${total}`;\r\n        }\r\n\r\n        if (activeColumn !== overColumn) {\r\n          return `${itemType} is now at position ${position} of ${total} in ${overColumn}`;\r\n        }\r\n\r\n        return `${itemType} is now at position ${position} of ${total}`;\r\n      },\r\n      onDragEnd({ active, over }) {\r\n        if (!over) return;\r\n\r\n        const isColumn = active.id in value;\r\n        const itemType = isColumn ? \"column\" : \"item\";\r\n        const position = isColumn\r\n          ? Object.keys(value).indexOf(over.id as string) + 1\r\n          : (() => {\r\n              const column = getColumn(over.id);\r\n              if (!column || !value[column]) return 1;\r\n              return (\r\n                value[column].findIndex(\r\n                  (item) => getItemValue(item) === over.id,\r\n                ) + 1\r\n              );\r\n            })();\r\n        const total = isColumn\r\n          ? Object.keys(value).length\r\n          : (() => {\r\n              const column = getColumn(over.id);\r\n              return column ? (value[column]?.length ?? 0) : 0;\r\n            })();\r\n\r\n        const overColumn = getColumn(over.id);\r\n        const activeColumn = getColumn(active.id);\r\n\r\n        if (isColumn) {\r\n          return `${itemType} was dropped at position ${position} of ${total}`;\r\n        }\r\n\r\n        if (activeColumn !== overColumn) {\r\n          return `${itemType} was dropped at position ${position} of ${total} in ${overColumn}`;\r\n        }\r\n\r\n        return `${itemType} was dropped at position ${position} of ${total}`;\r\n      },\r\n      onDragCancel({ active }) {\r\n        const isColumn = active.id in value;\r\n        const itemType = isColumn ? \"column\" : \"item\";\r\n        return `Dragging was cancelled. ${itemType} was dropped.`;\r\n      },\r\n    }),\r\n    [value, getColumn, getItemValue],\r\n  );\r\n\r\n  const contextValue = React.useMemo<KanbanContextValue<T>>(\r\n    () => ({\r\n      id,\r\n      items: value,\r\n      modifiers,\r\n      strategy,\r\n      orientation,\r\n      activeId,\r\n      setActiveId,\r\n      getItemValue,\r\n      flatCursor,\r\n    }),\r\n    [\r\n      id,\r\n      value,\r\n      activeId,\r\n      modifiers,\r\n      strategy,\r\n      orientation,\r\n      getItemValue,\r\n      flatCursor,\r\n    ],\r\n  );\r\n\r\n  return (\r\n    <KanbanContext.Provider value={contextValue as KanbanContextValue<unknown>}>\r\n      <DndContext\r\n        collisionDetection={collisionDetection}\r\n        modifiers={modifiers}\r\n        sensors={sensors}\r\n        {...kanbanProps}\r\n        id={id}\r\n        measuring={{\r\n          droppable: {\r\n            strategy: MeasuringStrategy.Always,\r\n          },\r\n        }}\r\n        onDragStart={onDragStart}\r\n        onDragOver={onDragOver}\r\n        onDragEnd={onDragEnd}\r\n        onDragCancel={onDragCancel}\r\n        accessibility={{\r\n          announcements,\r\n          screenReaderInstructions: {\r\n            draggable: `\r\n            To pick up a kanban item or column, press space or enter.\r\n            While dragging, use the arrow keys to move the item.\r\n            Press space or enter again to drop the item in its new position, or press escape to cancel.\r\n          `,\r\n          },\r\n          ...accessibility,\r\n        }}\r\n      />\r\n    </KanbanContext.Provider>\r\n  );\r\n}\r\n\r\nconst KanbanBoardContext = React.createContext<boolean>(false);\r\nKanbanBoardContext.displayName = BOARD_NAME;\r\n\r\ninterface KanbanBoardProps extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  children: React.ReactNode;\r\n  asChild?: boolean;\r\n}\r\n\r\nconst KanbanBoard = React.forwardRef<HTMLDivElement, KanbanBoardProps>(\r\n  (props, forwardedRef) => {\r\n    const { asChild, className, ...boardProps } = props;\r\n\r\n    const context = useKanbanContext(BOARD_NAME);\r\n\r\n    const columns = React.useMemo(() => {\r\n      return Object.keys(context.items);\r\n    }, [context.items]);\r\n\r\n    const BoardPrimitive = asChild ? Slot : \"div\";\r\n\r\n    return (\r\n      <KanbanBoardContext.Provider value={true}>\r\n        <SortableContext\r\n          items={columns}\r\n          strategy={\r\n            context.orientation === \"horizontal\"\r\n              ? horizontalListSortingStrategy\r\n              : verticalListSortingStrategy\r\n          }\r\n        >\r\n          <BoardPrimitive\r\n            aria-orientation={context.orientation}\r\n            data-orientation={context.orientation}\r\n            data-slot=\"kanban-board\"\r\n            {...boardProps}\r\n            ref={forwardedRef}\r\n            className={cn(\r\n              \"flex size-full gap-4\",\r\n              context.orientation === \"horizontal\" ? \"flex-row\" : \"flex-col\",\r\n              className,\r\n            )}\r\n          />\r\n        </SortableContext>\r\n      </KanbanBoardContext.Provider>\r\n    );\r\n  },\r\n);\r\nKanbanBoard.displayName = BOARD_NAME;\r\n\r\ninterface KanbanColumnContextValue {\r\n  id: string;\r\n  attributes: DraggableAttributes;\r\n  listeners: DraggableSyntheticListeners | undefined;\r\n  setActivatorNodeRef: (node: HTMLElement | null) => void;\r\n  isDragging?: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst KanbanColumnContext =\r\n  React.createContext<KanbanColumnContextValue | null>(null);\r\nKanbanColumnContext.displayName = COLUMN_NAME;\r\n\r\nconst animateLayoutChanges: AnimateLayoutChanges = (args) =>\r\n  defaultAnimateLayoutChanges({ ...args, wasDragging: true });\r\n\r\ninterface KanbanColumnProps extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  value: UniqueIdentifier;\r\n  children: React.ReactNode;\r\n  asChild?: boolean;\r\n  asHandle?: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst KanbanColumn = React.forwardRef<HTMLDivElement, KanbanColumnProps>(\r\n  (props, forwardedRef) => {\r\n    const {\r\n      value,\r\n      asChild,\r\n      asHandle,\r\n      disabled,\r\n      className,\r\n      style,\r\n      ...columnProps\r\n    } = props;\r\n\r\n    const id = React.useId();\r\n    const context = useKanbanContext(COLUMN_NAME);\r\n    const inBoard = React.useContext(KanbanBoardContext);\r\n    const inOverlay = React.useContext(KanbanOverlayContext);\r\n\r\n    if (!inBoard && !inOverlay) {\r\n      throw new Error(KANBAN_ERRORS[COLUMN_NAME]);\r\n    }\r\n\r\n    if (value === \"\") {\r\n      throw new Error(`\\`${COLUMN_NAME}\\` value cannot be an empty string`);\r\n    }\r\n\r\n    const {\r\n      attributes,\r\n      listeners,\r\n      setNodeRef,\r\n      setActivatorNodeRef,\r\n      transform,\r\n      transition,\r\n      isDragging,\r\n    } = useSortable({\r\n      id: value,\r\n      disabled,\r\n      animateLayoutChanges,\r\n    });\r\n\r\n    const composedRef = useComposedRefs(forwardedRef, (node) => {\r\n      if (disabled) return;\r\n      setNodeRef(node);\r\n    });\r\n\r\n    const composedStyle = React.useMemo<React.CSSProperties>(() => {\r\n      return {\r\n        transform: CSS.Transform.toString(transform),\r\n        transition,\r\n        ...style,\r\n      };\r\n    }, [transform, transition, style]);\r\n\r\n    const items = React.useMemo(() => {\r\n      const items = context.items[value] ?? [];\r\n      return items.map((item) => context.getItemValue(item));\r\n    }, [context.items, value, context.getItemValue]);\r\n\r\n    const columnContext = React.useMemo<KanbanColumnContextValue>(\r\n      () => ({\r\n        id,\r\n        attributes,\r\n        listeners,\r\n        setActivatorNodeRef,\r\n        isDragging,\r\n        disabled,\r\n      }),\r\n      [id, attributes, listeners, setActivatorNodeRef, isDragging, disabled],\r\n    );\r\n\r\n    const ColumnPrimitive = asChild ? Slot : \"div\";\r\n\r\n    return (\r\n      <KanbanColumnContext.Provider value={columnContext}>\r\n        <SortableContext\r\n          items={items}\r\n          strategy={\r\n            context.orientation === \"horizontal\"\r\n              ? horizontalListSortingStrategy\r\n              : verticalListSortingStrategy\r\n          }\r\n        >\r\n          <ColumnPrimitive\r\n            id={id}\r\n            data-disabled={disabled}\r\n            data-dragging={isDragging ? \"\" : undefined}\r\n            data-slot=\"kanban-column\"\r\n            {...columnProps}\r\n            {...(asHandle && !disabled ? attributes : {})}\r\n            {...(asHandle && !disabled ? listeners : {})}\r\n            ref={composedRef}\r\n            style={composedStyle}\r\n            className={cn(\r\n              \"flex size-full flex-col gap-2 rounded-lg border bg-zinc-100 p-2.5 aria-disabled:pointer-events-none aria-disabled:opacity-50 dark:bg-zinc-900\",\r\n              {\r\n                \"touch-none select-none\": asHandle,\r\n                \"cursor-default\": context.flatCursor,\r\n                \"data-dragging:cursor-grabbing\": !context.flatCursor,\r\n                \"cursor-grab\": !isDragging && asHandle && !context.flatCursor,\r\n                \"opacity-50\": isDragging,\r\n                \"pointer-events-none opacity-50\": disabled,\r\n              },\r\n              className,\r\n            )}\r\n          />\r\n        </SortableContext>\r\n      </KanbanColumnContext.Provider>\r\n    );\r\n  },\r\n);\r\nKanbanColumn.displayName = COLUMN_NAME;\r\n\r\ninterface KanbanColumnHandleProps\r\n  extends React.ComponentPropsWithoutRef<\"button\"> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst KanbanColumnHandle = React.forwardRef<\r\n  HTMLButtonElement,\r\n  KanbanColumnHandleProps\r\n>((props, forwardedRef) => {\r\n  const { asChild, disabled, className, ...columnHandleProps } = props;\r\n\r\n  const context = useKanbanContext(COLUMN_NAME);\r\n  const columnContext = React.useContext(KanbanColumnContext);\r\n\r\n  if (!columnContext) {\r\n    throw new Error(KANBAN_ERRORS[COLUMN_HANDLE_NAME]);\r\n  }\r\n\r\n  const isDisabled = disabled ?? columnContext.disabled;\r\n\r\n  const composedRef = useComposedRefs(forwardedRef, (node) => {\r\n    if (isDisabled) return;\r\n    columnContext.setActivatorNodeRef(node);\r\n  });\r\n\r\n  const HandlePrimitive = asChild ? Slot : \"button\";\r\n\r\n  return (\r\n    <HandlePrimitive\r\n      type=\"button\"\r\n      aria-controls={columnContext.id}\r\n      data-disabled={isDisabled}\r\n      data-dragging={columnContext.isDragging ? \"\" : undefined}\r\n      data-slot=\"kanban-column-handle\"\r\n      {...columnHandleProps}\r\n      {...(isDisabled ? {} : columnContext.attributes)}\r\n      {...(isDisabled ? {} : columnContext.listeners)}\r\n      ref={composedRef}\r\n      className={cn(\r\n        \"select-none disabled:pointer-events-none disabled:opacity-50\",\r\n        context.flatCursor\r\n          ? \"cursor-default\"\r\n          : \"cursor-grab data-dragging:cursor-grabbing\",\r\n        className,\r\n      )}\r\n      disabled={isDisabled}\r\n    />\r\n  );\r\n});\r\nKanbanColumnHandle.displayName = COLUMN_HANDLE_NAME;\r\n\r\ninterface KanbanItemContextValue {\r\n  id: string;\r\n  attributes: DraggableAttributes;\r\n  listeners: DraggableSyntheticListeners | undefined;\r\n  setActivatorNodeRef: (node: HTMLElement | null) => void;\r\n  isDragging?: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst KanbanItemContext = React.createContext<KanbanItemContextValue | null>(\r\n  null,\r\n);\r\nKanbanItemContext.displayName = ITEM_NAME;\r\n\r\ninterface KanbanItemProps extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  value: UniqueIdentifier;\r\n  asHandle?: boolean;\r\n  asChild?: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst KanbanItem = React.forwardRef<HTMLDivElement, KanbanItemProps>(\r\n  (props, forwardedRef) => {\r\n    const {\r\n      value,\r\n      style,\r\n      asHandle,\r\n      asChild,\r\n      disabled,\r\n      className,\r\n      ...itemProps\r\n    } = props;\r\n\r\n    const id = React.useId();\r\n    const context = useKanbanContext(ITEM_NAME);\r\n    const inBoard = React.useContext(KanbanBoardContext);\r\n    const inOverlay = React.useContext(KanbanOverlayContext);\r\n\r\n    if (!inBoard && !inOverlay) {\r\n      throw new Error(KANBAN_ERRORS[ITEM_NAME]);\r\n    }\r\n\r\n    const {\r\n      attributes,\r\n      listeners,\r\n      setNodeRef,\r\n      setActivatorNodeRef,\r\n      transform,\r\n      transition,\r\n      isDragging,\r\n    } = useSortable({ id: value, disabled });\r\n\r\n    if (value === \"\") {\r\n      throw new Error(`\\`${ITEM_NAME}\\` value cannot be an empty string`);\r\n    }\r\n\r\n    const composedRef = useComposedRefs(forwardedRef, (node) => {\r\n      if (disabled) return;\r\n      setNodeRef(node);\r\n    });\r\n\r\n    const composedStyle = React.useMemo<React.CSSProperties>(() => {\r\n      return {\r\n        transform: CSS.Transform.toString(transform),\r\n        transition,\r\n        ...style,\r\n      };\r\n    }, [transform, transition, style]);\r\n\r\n    const itemContext = React.useMemo<KanbanItemContextValue>(\r\n      () => ({\r\n        id,\r\n        attributes,\r\n        listeners,\r\n        setActivatorNodeRef,\r\n        isDragging,\r\n        disabled,\r\n      }),\r\n      [id, attributes, listeners, setActivatorNodeRef, isDragging, disabled],\r\n    );\r\n\r\n    const ItemPrimitive = asChild ? Slot : \"div\";\r\n\r\n    return (\r\n      <KanbanItemContext.Provider value={itemContext}>\r\n        <ItemPrimitive\r\n          id={id}\r\n          data-disabled={disabled}\r\n          data-dragging={isDragging ? \"\" : undefined}\r\n          data-slot=\"kanban-item\"\r\n          {...itemProps}\r\n          {...(asHandle && !disabled ? attributes : {})}\r\n          {...(asHandle && !disabled ? listeners : {})}\r\n          ref={composedRef}\r\n          style={composedStyle}\r\n          className={cn(\r\n            \"focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1\",\r\n            {\r\n              \"touch-none select-none\": asHandle,\r\n              \"cursor-default\": context.flatCursor,\r\n              \"data-dragging:cursor-grabbing\": !context.flatCursor,\r\n              \"cursor-grab\": !isDragging && asHandle && !context.flatCursor,\r\n              \"opacity-50\": isDragging,\r\n              \"pointer-events-none opacity-50\": disabled,\r\n            },\r\n            className,\r\n          )}\r\n        />\r\n      </KanbanItemContext.Provider>\r\n    );\r\n  },\r\n);\r\nKanbanItem.displayName = ITEM_NAME;\r\n\r\ninterface KanbanItemHandleProps\r\n  extends React.ComponentPropsWithoutRef<\"button\"> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst KanbanItemHandle = React.forwardRef<\r\n  HTMLButtonElement,\r\n  KanbanItemHandleProps\r\n>((props, forwardedRef) => {\r\n  const { asChild, disabled, className, ...itemHandleProps } = props;\r\n\r\n  const itemContext = React.useContext(KanbanItemContext);\r\n  if (!itemContext) {\r\n    throw new Error(KANBAN_ERRORS[ITEM_HANDLE_NAME]);\r\n  }\r\n  const context = useKanbanContext(ITEM_HANDLE_NAME);\r\n\r\n  const isDisabled = disabled ?? itemContext.disabled;\r\n\r\n  const composedRef = useComposedRefs(forwardedRef, (node) => {\r\n    if (isDisabled) return;\r\n    itemContext.setActivatorNodeRef(node);\r\n  });\r\n\r\n  const HandlePrimitive = asChild ? Slot : \"button\";\r\n\r\n  return (\r\n    <HandlePrimitive\r\n      type=\"button\"\r\n      aria-controls={itemContext.id}\r\n      data-disabled={isDisabled}\r\n      data-dragging={itemContext.isDragging ? \"\" : undefined}\r\n      data-slot=\"kanban-item-handle\"\r\n      {...itemHandleProps}\r\n      {...(isDisabled ? {} : itemContext.attributes)}\r\n      {...(isDisabled ? {} : itemContext.listeners)}\r\n      ref={composedRef}\r\n      className={cn(\r\n        \"select-none disabled:pointer-events-none disabled:opacity-50\",\r\n        context.flatCursor\r\n          ? \"cursor-default\"\r\n          : \"cursor-grab data-dragging:cursor-grabbing\",\r\n        className,\r\n      )}\r\n      disabled={isDisabled}\r\n    />\r\n  );\r\n});\r\nKanbanItemHandle.displayName = ITEM_HANDLE_NAME;\r\n\r\nconst KanbanOverlayContext = React.createContext(false);\r\nKanbanOverlayContext.displayName = OVERLAY_NAME;\r\n\r\nconst dropAnimation: DropAnimation = {\r\n  sideEffects: defaultDropAnimationSideEffects({\r\n    styles: {\r\n      active: {\r\n        opacity: \"0.4\",\r\n      },\r\n    },\r\n  }),\r\n};\r\n\r\ninterface KanbanOverlayProps\r\n  extends Omit<React.ComponentPropsWithoutRef<typeof DragOverlay>, \"children\"> {\r\n  container?: Element | DocumentFragment | null;\r\n  children?:\r\n    | ((params: {\r\n        value: UniqueIdentifier;\r\n        variant: \"column\" | \"item\";\r\n      }) => React.ReactNode)\r\n    | React.ReactNode;\r\n}\r\n\r\nfunction KanbanOverlay(props: KanbanOverlayProps) {\r\n  const { container: containerProp, children, ...overlayProps } = props;\r\n\r\n  const context = useKanbanContext(OVERLAY_NAME);\r\n\r\n  const [mounted, setMounted] = React.useState(false);\r\n  React.useLayoutEffect(() => setMounted(true), []);\r\n\r\n  const container =\r\n    containerProp ?? (mounted ? globalThis.document?.body : null);\r\n\r\n  if (!container) return null;\r\n\r\n  const variant =\r\n    context.activeId && context.activeId in context.items ? \"column\" : \"item\";\r\n\r\n  return ReactDOM.createPortal(\r\n    <DragOverlay\r\n      dropAnimation={dropAnimation}\r\n      modifiers={context.modifiers}\r\n      className={cn(!context.flatCursor && \"cursor-grabbing\")}\r\n      {...overlayProps}\r\n    >\r\n      <KanbanOverlayContext.Provider value={true}>\r\n        {context.activeId && children\r\n          ? typeof children === \"function\"\r\n            ? children({\r\n                value: context.activeId,\r\n                variant,\r\n              })\r\n            : children\r\n          : null}\r\n      </KanbanOverlayContext.Provider>\r\n    </DragOverlay>,\r\n    container,\r\n  );\r\n}\r\n\r\nconst Root = Kanban;\r\nconst Board = KanbanBoard;\r\nconst Column = KanbanColumn;\r\nconst ColumnHandle = KanbanColumnHandle;\r\nconst Item = KanbanItem;\r\nconst ItemHandle = KanbanItemHandle;\r\nconst Overlay = KanbanOverlay;\r\n\r\nexport {\r\n  Kanban,\r\n  KanbanBoard,\r\n  KanbanColumn,\r\n  KanbanColumnHandle,\r\n  KanbanItem,\r\n  KanbanItemHandle,\r\n  KanbanOverlay,\r\n  //\r\n  Root,\r\n  Board,\r\n  Column,\r\n  ColumnHandle,\r\n  Item,\r\n  ItemHandle,\r\n  Overlay,\r\n};\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib/composition.ts",
      "content": "import * as React from \"react\";\n\n/**\n * A utility to compose multiple event handlers into a single event handler.\n * Run originalEventHandler first, then ourEventHandler unless prevented.\n */\nfunction composeEventHandlers<E>(\n  originalEventHandler?: (event: E) => void,\n  ourEventHandler?: (event: E) => void,\n  { checkForDefaultPrevented = true } = {},\n) {\n  return function handleEvent(event: E) {\n    originalEventHandler?.(event);\n\n    if (\n      checkForDefaultPrevented === false ||\n      !(event as unknown as Event).defaultPrevented\n    ) {\n      return ourEventHandler?.(event);\n    }\n  };\n}\n\n/**\n * @see https://github.com/radix-ui/primitives/blob/main/packages/react/compose-refs/src/compose-refs.tsx\n */\n\ntype PossibleRef<T> = React.Ref<T> | undefined;\n\n/**\n * Set a given ref to a given value.\n * This utility takes care of different types of refs: callback refs and RefObject(s).\n */\nfunction setRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === \"function\") {\n    return ref(value);\n  }\n\n  if (ref !== null && ref !== undefined) {\n    ref.current = value;\n  }\n}\n\n/**\n * A utility to compose multiple refs together.\n * Accepts callback refs and RefObject(s).\n */\nfunction composeRefs<T>(...refs: PossibleRef<T>[]): React.RefCallback<T> {\n  return (node) => {\n    let hasCleanup = false;\n    const cleanups = refs.map((ref) => {\n      const cleanup = setRef(ref, node);\n      if (!hasCleanup && typeof cleanup === \"function\") {\n        hasCleanup = true;\n      }\n      return cleanup;\n    });\n\n    // React <19 will log an error to the console if a callback ref returns a\n    // value. We don't use ref cleanups internally so this will only happen if a\n    // user's ref callback returns a value, which we only expect if they are\n    // using the cleanup functionality added in React 19.\n    if (hasCleanup) {\n      return () => {\n        for (let i = 0; i < cleanups.length; i++) {\n          const cleanup = cleanups[i];\n          if (typeof cleanup === \"function\") {\n            cleanup();\n          } else {\n            setRef(refs[i], null);\n          }\n        }\n      };\n    }\n  };\n}\n\n/**\n * A custom hook that composes multiple refs.\n * Accepts callback refs and RefObject(s).\n */\nfunction useComposedRefs<T>(...refs: PossibleRef<T>[]): React.RefCallback<T> {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(composeRefs(...refs), refs);\n}\n\nexport { composeEventHandlers, composeRefs, useComposedRefs };\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}