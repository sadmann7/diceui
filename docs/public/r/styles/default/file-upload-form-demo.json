{
  "name": "file-upload-form-demo",
  "type": "registry:example",
  "dependencies": [
    "@radix-ui/react-slot",
    "lucide-react",
    "@hookform/resolvers/zod",
    "zod"
  ],
  "registryDependencies": [
    "button",
    "form"
  ],
  "files": [
    {
      "path": "examples/file-upload-form-demo.tsx",
      "content": "\"use client\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Paperclip, X } from \"lucide-react\";\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  FileUpload,\n  FileUploadDropzone,\n  FileUploadItem,\n  FileUploadItemDelete,\n  FileUploadItemMetadata,\n  FileUploadItemPreview,\n  FileUploadList,\n  FileUploadTrigger,\n} from \"@/registry/default/ui/file-upload\";\nimport { toast } from \"sonner\";\n\nconst formSchema = z.object({\n  files: z.array(z.custom<File>()).min(1, \"Please select at least one file\"),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport default function FileUploadFormDemo() {\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      files: [],\n    },\n  });\n\n  const onSubmit = React.useCallback((data: FormValues) => {\n    toast(\"Files uploaded successfully\", {\n      description: (\n        <pre className=\"mt-2 w-[340px] rounded-md bg-slate-950 p-4\">\n          <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n        </pre>\n      ),\n    });\n  }, []);\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-full max-w-md\">\n        <FormField\n          control={form.control}\n          name=\"files\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Attachments</FormLabel>\n              <FormControl>\n                <FileUpload\n                  value={field.value}\n                  onValueChange={field.onChange}\n                  accept=\"image/*\"\n                  maxSize={5 * 1024 * 1024}\n                >\n                  <FileUploadDropzone className=\"border-dotted\">\n                    Drag and drop or\n                    <FileUploadTrigger asChild>\n                      <Button variant=\"link\" size=\"sm\" className=\"w-fit\">\n                        choose files\n                      </Button>\n                    </FileUploadTrigger>\n                    to upload\n                  </FileUploadDropzone>\n                  <FileUploadList>\n                    {field.value.map((file, index) => (\n                      <FileUploadItem key={index} value={file}>\n                        <FileUploadItemPreview />\n                        <FileUploadItemMetadata />\n                        <FileUploadItemDelete asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"size-7\"\n                          >\n                            <X />\n                            <span className=\"sr-only\">Delete</span>\n                          </Button>\n                        </FileUploadItemDelete>\n                      </FileUploadItem>\n                    ))}\n                  </FileUploadList>\n                </FileUpload>\n              </FormControl>\n              <FormDescription>\n                Upload only images up to 5MB each.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\" className=\"mt-4\">\n          Submit\n        </Button>\n      </form>\n    </Form>\n  );\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}