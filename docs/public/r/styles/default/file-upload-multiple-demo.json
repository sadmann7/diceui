{
  "name": "file-upload-multiple-demo",
  "type": "registry:example",
  "dependencies": [
    "@radix-ui/react-slot",
    "lucide-react"
  ],
  "registryDependencies": [
    "file-upload",
    "button",
    "badge"
  ],
  "files": [
    {
      "path": "examples/file-upload-multiple-demo.tsx",
      "content": "\"use client\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  FileUpload,\n  FileUploadDropzone,\n  FileUploadItem,\n  FileUploadItemDelete,\n  FileUploadItemMetadata,\n  FileUploadItemPreview,\n  FileUploadItemProgress,\n  FileUploadList,\n} from \"@/registry/default/ui/file-upload\";\nimport { CheckCircle2Icon, Trash2Icon, UploadCloudIcon } from \"lucide-react\";\nimport * as React from \"react\";\n\nfunction formatBytes(bytes: number) {\n  if (bytes === 0) return \"0 B\";\n  const sizes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\n  return `${(bytes / 1024 ** i).toFixed(i ? 1 : 0)} ${sizes[i]}`;\n}\n\nexport default function FileUploadMultipleDemo() {\n  const [files, setFiles] = React.useState<File[]>([]);\n\n  const simulateUpload = React.useCallback(\n    async (\n      _file: File,\n      {\n        onProgress,\n        onSuccess,\n        onError,\n      }: {\n        onProgress: (progress: number) => void;\n        onSuccess: () => void;\n        onError: (error: Error) => void;\n      },\n    ) => {\n      try {\n        // Simulate the upload process\n        const totalSteps = 10;\n        const stepTime = Math.random() * 200 + 100; // Random time between 100-300ms per step\n        for (let step = 1; step <= totalSteps; step++) {\n          await new Promise((resolve) => setTimeout(resolve, stepTime));\n          onProgress((step / totalSteps) * 100);\n        }\n        onSuccess();\n      } catch (error) {\n        onError(error instanceof Error ? error : new Error(\"Upload failed\"));\n      }\n    },\n    [],\n  );\n\n  // Group files by type\n  const filesByType = React.useMemo(() => {\n    const groups: Record<string, File[]> = {};\n\n    for (const file of files) {\n      const type = file.type.split(\"/\")[0] || \"other\";\n      if (!groups[type]) {\n        groups[type] = [];\n      }\n      groups[type].push(file);\n    }\n\n    return groups;\n  }, [files]);\n\n  return (\n    <div className=\"w-full max-w-xl\">\n      <FileUpload\n        value={files}\n        onValueChange={setFiles}\n        onUpload={simulateUpload}\n        multiple\n        className=\"w-full\"\n      >\n        <FileUploadDropzone className=\"flex flex-col items-center justify-center gap-4 rounded-lg border border-border border-dashed p-8\">\n          <UploadCloudIcon className=\"h-10 w-10 text-muted-foreground\" />\n          <div className=\"space-y-2 text-center\">\n            <h3 className=\"font-medium text-base\">Upload multiple files</h3>\n            <p className=\"text-muted-foreground text-sm\">\n              Drag and drop files here or click to browse\n            </p>\n          </div>\n        </FileUploadDropzone>\n        {Object.entries(filesByType).map(([type, typeFiles]) => (\n          <div key={type} className=\"mt-6\">\n            <div className=\"mb-3 flex items-center gap-2\">\n              <h3 className=\"font-medium text-sm capitalize\">{type} Files</h3>\n              <Badge variant=\"outline\">{typeFiles.length}</Badge>\n            </div>\n            <FileUploadList className=\"space-y-2\">\n              {typeFiles.map((file) => (\n                <FileUploadItem\n                  key={file.name}\n                  value={file}\n                  className=\"flex items-center rounded-md border border-border bg-background p-3\"\n                >\n                  <FileUploadItemPreview className=\"size-10 rounded bg-muted/50 p-2\" />\n                  <FileUploadItemMetadata className=\"flex-1 px-4\" />\n                  <div className=\"flex items-center gap-2\">\n                    <FileUploadItemProgress className=\"h-1 w-[60px]\" />\n                    <FileUploadItemDelete asChild>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"size-7 text-muted-foreground\"\n                      >\n                        <Trash2Icon />\n                      </Button>\n                    </FileUploadItemDelete>\n                  </div>\n                </FileUploadItem>\n              ))}\n            </FileUploadList>\n          </div>\n        ))}\n        {files.length > 0 && (\n          <div className=\"mt-6 flex items-center justify-between rounded-md bg-muted p-3\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle2Icon className=\"h-5 w-5 text-primary\" />\n              <span className=\"font-medium text-sm\">\n                {files.length} file{files.length !== 1 ? \"s\" : \"\"} ready\n              </span>\n            </div>\n            <span className=\"text-muted-foreground text-sm\">\n              Total size:{\" \"}\n              {formatBytes(files.reduce((acc, file) => acc + file.size, 0))}\n            </span>\n          </div>\n        )}\n      </FileUpload>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}