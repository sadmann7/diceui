{
  "name": "stepper-form-demo",
  "type": "registry:example",
  "dependencies": [
    "@hookform/resolvers/zod",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "button",
    "form",
    "input",
    "textarea"
  ],
  "files": [
    {
      "path": "examples/stepper-form-demo.tsx",
      "content": "\"use client\";\r\n\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport * as React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast } from \"sonner\";\r\nimport * as z from \"zod\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport {\r\n  Stepper,\r\n  StepperContent,\r\n  StepperDescription,\r\n  StepperIndicator,\r\n  StepperItem,\r\n  StepperList,\r\n  StepperNextTrigger,\r\n  StepperPrevTrigger,\r\n  type StepperProps,\r\n  StepperSeparator,\r\n  StepperTitle,\r\n  StepperTrigger,\r\n} from \"@/registry/default/ui/stepper\";\r\n\r\nconst formSchema = z.object({\r\n  firstName: z.string().min(2, \"First name must be at least 2 characters\"),\r\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\r\n  email: z.email(\"Please enter a valid email address\"),\r\n  bio: z.string().min(10, \"Bio must be at least 10 characters\"),\r\n  company: z.string().min(2, \"Company name must be at least 2 characters\"),\r\n  website: z\r\n    .string()\r\n    .url(\"Please enter a valid URL\")\r\n    .optional()\r\n    .or(z.literal(\"\")),\r\n});\r\n\r\ntype FormSchema = z.infer<typeof formSchema>;\r\n\r\nconst steps = [\r\n  {\r\n    value: \"personal\",\r\n    title: \"Personal Details\",\r\n    description: \"Enter your basic information\",\r\n    fields: [\"firstName\", \"lastName\", \"email\"] as const,\r\n  },\r\n  {\r\n    value: \"about\",\r\n    title: \"About You\",\r\n    description: \"Tell us more about yourself\",\r\n    fields: [\"bio\"] as const,\r\n  },\r\n  {\r\n    value: \"professional\",\r\n    title: \"Professional Info\",\r\n    description: \"Add your professional details\",\r\n    fields: [\"company\", \"website\"] as const,\r\n  },\r\n];\r\n\r\nexport default function StepperFormDemo() {\r\n  const [currentStep, setCurrentStep] = React.useState(\"personal\");\r\n\r\n  const form = useForm<FormSchema>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      bio: \"\",\r\n      company: \"\",\r\n      website: \"\",\r\n    },\r\n  });\r\n\r\n  const currentIndex = steps.findIndex((step) => step.value === currentStep);\r\n\r\n  const onValidate: NonNullable<StepperProps[\"onValidate\"]> = React.useCallback(\r\n    async (_value, direction) => {\r\n      if (direction === \"prev\") return true;\r\n\r\n      const currentStepData = steps.find((s) => s.value === currentStep);\r\n      if (!currentStepData) return true;\r\n\r\n      const isValid = await form.trigger(currentStepData.fields);\r\n\r\n      if (!isValid) {\r\n        toast.info(\"Please complete all required fields to continue\");\r\n      }\r\n\r\n      return isValid;\r\n    },\r\n    [form, currentStep],\r\n  );\r\n\r\n  const onValueChange = React.useCallback((value: string) => {\r\n    setCurrentStep(value);\r\n  }, []);\r\n\r\n  const onSubmit = React.useCallback((input: FormSchema) => {\r\n    toast.success(\r\n      <pre className=\"w-full\">{JSON.stringify(input, null, 2)}</pre>,\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)}>\r\n        <Stepper\r\n          value={currentStep}\r\n          onValueChange={onValueChange}\r\n          onValidate={onValidate}\r\n        >\r\n          <StepperList>\r\n            {steps.map((step) => (\r\n              <StepperItem key={step.value} value={step.value}>\r\n                <StepperTrigger>\r\n                  <StepperIndicator />\r\n                  <div className=\"flex flex-col gap-px\">\r\n                    <StepperTitle>{step.title}</StepperTitle>\r\n                    <StepperDescription>{step.description}</StepperDescription>\r\n                  </div>\r\n                </StepperTrigger>\r\n                <StepperSeparator className=\"mx-4\" />\r\n              </StepperItem>\r\n            ))}\r\n          </StepperList>\r\n          <StepperContent value=\"personal\">\r\n            <div className=\"flex flex-col gap-4\">\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"firstName\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>First Name</FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"John\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"lastName\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Last Name</FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"Doe\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n              <FormField\r\n                control={form.control}\r\n                name=\"email\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>Email</FormLabel>\r\n                    <FormControl>\r\n                      <Input placeholder=\"john.doe@example.com\" {...field} />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n            </div>\r\n          </StepperContent>\r\n          <StepperContent value=\"about\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"bio\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Bio</FormLabel>\r\n                  <FormControl>\r\n                    <Textarea\r\n                      placeholder=\"Tell us about yourself...\"\r\n                      className=\"min-h-[120px]\"\r\n                      {...field}\r\n                    />\r\n                  </FormControl>\r\n                  <FormDescription>\r\n                    Write a brief description about yourself.\r\n                  </FormDescription>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </StepperContent>\r\n          <StepperContent value=\"professional\">\r\n            <div className=\"flex flex-col gap-4\">\r\n              <FormField\r\n                control={form.control}\r\n                name=\"company\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>Company</FormLabel>\r\n                    <FormControl>\r\n                      <Input placeholder=\"Acme Inc.\" {...field} />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n              <FormField\r\n                control={form.control}\r\n                name=\"website\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>Website</FormLabel>\r\n                    <FormControl>\r\n                      <Input placeholder=\"https://example.com\" {...field} />\r\n                    </FormControl>\r\n                    <FormDescription>\r\n                      Optional: Your personal or company website.\r\n                    </FormDescription>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n            </div>\r\n          </StepperContent>\r\n          <div className=\"mt-4 flex justify-between\">\r\n            <StepperPrevTrigger asChild>\r\n              <Button type=\"button\" variant=\"outline\">\r\n                Previous\r\n              </Button>\r\n            </StepperPrevTrigger>\r\n            <div className=\"text-muted-foreground text-sm\">\r\n              Step {currentIndex + 1} of {steps.length}\r\n            </div>\r\n            {currentIndex === steps.length - 1 ? (\r\n              <Button type=\"submit\">Complete</Button>\r\n            ) : (\r\n              <StepperNextTrigger asChild>\r\n                <Button type=\"button\">Next</Button>\r\n              </StepperNextTrigger>\r\n            )}\r\n          </div>\r\n        </Stepper>\r\n      </form>\r\n    </Form>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}