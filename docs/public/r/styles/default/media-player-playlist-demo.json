{
  "name": "media-player-playlist-demo",
  "type": "registry:example",
  "dependencies": [
    "@radix-ui/react-slot",
    "lucide-react",
    "media-chrome"
  ],
  "registryDependencies": [
    "button",
    "scroll-area",
    "media-player"
  ],
  "files": [
    {
      "path": "examples/media-player-playlist-demo.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  MediaPlayer,\n  MediaPlayerAudio,\n  MediaPlayerControls,\n  MediaPlayerPlay,\n  MediaPlayerSeek,\n  MediaPlayerTime,\n  MediaPlayerVolume,\n} from \"@/registry/default/ui/media-player\";\nimport { ListMusicIcon, PauseCircleIcon, PlayCircleIcon } from \"lucide-react\";\nimport * as React from \"react\";\n\ninterface Track {\n  id: string;\n  title: string;\n  artist: string;\n  src: string;\n  cover: string;\n}\n\nconst tracks: Track[] = [\n  {\n    id: \"1\",\n    title: \"Medieval: Battle\",\n    artist: \"RandomMind\",\n    src: \"https://opengameart.org/sites/default/files/battle.mp3\",\n    cover: \"https://picsum.photos/seed/battle/200/200\",\n  },\n  {\n    id: \"2\",\n    title: \"City Lights\",\n    artist: \"The Lemming Shepherds\",\n    src: \"https://www.dropbox.com/s/mvvwaw1msplnteq/City%20Lights%20-%20The%20Lemming%20Shepherds.mp3?raw=1\",\n    cover: \"https://picsum.photos/seed/citylights/200/200\",\n  },\n  {\n    id: \"3\",\n    title: \"The Cradle of Your Soul\",\n    artist: \"Angelwing\",\n    src: \"https://www.dropbox.com/s/ayf4cwdytqafs70/The%20Calling%20%20-%20Angelwing.mp3?raw=1\",\n    cover: \"https://picsum.photos/seed/calling/200/200\",\n  },\n  {\n    id: \"4\",\n    title: \"Happy Days\",\n    artist: \"FSM Team\",\n    src: \"https://www.free-stock-music.com/music/fsm-team-happy-days.mp3\",\n    cover: \"https://picsum.photos/seed/happydays/200/200\",\n  },\n];\n\nexport default function MediaPlayerPlaylistDemo() {\n  const [currentTrackIndex, setCurrentTrackIndex] = React.useState(0);\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const audioRef = React.useRef<HTMLAudioElement | null>(null);\n\n  const currentTrack = React.useMemo(\n    () => tracks[currentTrackIndex],\n    [currentTrackIndex],\n  );\n\n  const onPlay = React.useCallback(() => {\n    setIsPlaying(true);\n  }, []);\n\n  const onPause = React.useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n\n  const onEnded = React.useCallback(() => {\n    onNextTrack();\n  }, []);\n\n  const onPlayTrack = (index: number) => {\n    const trackToPlay = tracks[index];\n    if (!trackToPlay) {\n      console.error({ error: `Track at index ${index} not found.` });\n      return;\n    }\n    setCurrentTrackIndex(index);\n    setIsPlaying(true);\n    if (audioRef.current) {\n      audioRef.current.src = trackToPlay.src;\n      audioRef.current.load();\n      audioRef.current.play().catch((error) => console.error({ error }));\n    }\n  };\n\n  const onTogglePlayPauseTrack = (index: number) => {\n    if (index === currentTrackIndex) {\n      if (isPlaying) {\n        audioRef.current?.pause();\n      } else {\n        audioRef.current?.play().catch((error) => console.error({ error }));\n      }\n      setIsPlaying(!isPlaying);\n    } else {\n      onPlayTrack(index);\n    }\n  };\n\n  const onNextTrack = () => {\n    const nextIndex = (currentTrackIndex + 1) % tracks.length;\n    onPlayTrack(nextIndex);\n  };\n\n  const onPreviousTrack = () => {\n    const prevIndex = (currentTrackIndex - 1 + tracks.length) % tracks.length;\n    onPlayTrack(prevIndex);\n  };\n\n  React.useEffect(() => {\n    if (audioRef.current && currentTrack) {\n      audioRef.current.src = currentTrack.src;\n      audioRef.current.load();\n      if (isPlaying) {\n        audioRef.current.play().catch((error) => console.error({ error }));\n      }\n    }\n  }, [currentTrack?.src, isPlaying, currentTrack]);\n\n  if (!currentTrack) {\n    return <div>Loading track...</div>;\n  }\n\n  return (\n    <div className=\"w-full max-w-2xl overflow-hidden rounded-lg bg-card shadow-lg\">\n      <MediaPlayer\n        onPlay={onPlay}\n        onPause={onPause}\n        onEnded={onEnded}\n        className=\"[&_[data-slot=media-player-controls]]:bg-transparent [&_[data-slot=media-player-controls]]:px-0 [&_[data-slot=media-player-controls]]:pb-0 [&_[data-slot=media-player-controls]]:dark:bg-transparent\"\n      >\n        <div className=\"flex flex-col sm:flex-row\">\n          <div className=\"flex flex-col items-center p-4 sm:w-1/3 sm:items-start\">\n            <img\n              src={currentTrack.cover}\n              alt={currentTrack.title}\n              width={200}\n              height={200}\n              className=\"mb-4 aspect-square rounded-md object-cover\"\n            />\n            <h2 className=\"font-semibold text-foreground text-xl\">\n              {currentTrack.title}\n            </h2>\n            <p className=\"text-muted-foreground text-sm\">\n              {currentTrack.artist}\n            </p>\n            <MediaPlayerControls className=\"mt-4 w-full p-0\">\n              <MediaPlayerSeek className=\"w-full [&_[data-slider]]:h-8\" />\n              <div className=\"mt-1 flex w-full items-center justify-between\">\n                <MediaPlayerTime variant=\"progress\" className=\"text-xs\" />\n                <MediaPlayerTime variant=\"duration\" className=\"text-xs\" />\n              </div>\n              <div className=\"mt-2 flex w-full items-center justify-center gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={onPreviousTrack}\n                  aria-label=\"Previous track\"\n                >\n                  <svg\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  >\n                    <polygon points=\"19 20 9 12 19 4 19 20\"></polygon>\n                    <line x1=\"5\" y1=\"19\" x2=\"5\" y2=\"5\"></line>\n                  </svg>\n                </Button>\n                <MediaPlayerPlay className=\"size-10\" />\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={onNextTrack}\n                  aria-label=\"Next track\"\n                >\n                  <svg\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  >\n                    <polygon points=\"5 4 15 12 5 20 5 4\"></polygon>\n                    <line x1=\"19\" y1=\"5\" x2=\"19\" y2=\"19\"></line>\n                  </svg>\n                </Button>\n              </div>\n              <div className=\"mt-2 flex w-full items-center gap-2\">\n                <MediaPlayerVolume className=\"flex-grow\" />\n              </div>\n            </MediaPlayerControls>\n          </div>\n\n          <div className=\"border-border border-t sm:w-2/3 sm:border-t-0 sm:border-l\">\n            <div className=\"flex items-center justify-between border-border border-b p-4\">\n              <h3 className=\"flex items-center font-medium text-foreground text-lg\">\n                <ListMusicIcon className=\"mr-2 size-5\" /> Playlist\n              </h3>\n              <span className=\"text-muted-foreground text-xs\">{`${currentTrackIndex + 1} / ${tracks.length}`}</span>\n            </div>\n            <ScrollArea className=\"h-[360px] sm:h-[calc(200px+10rem)]\">\n              {\" \"}\n              {/* Adjusted height */}\n              <div className=\"divide-y divide-border\">\n                {tracks.map((track, index) => (\n                  <button\n                    key={track.id}\n                    onClick={() => onTogglePlayPauseTrack(index)}\n                    className={cn(\n                      \"flex w-full items-center p-3 text-left transition-colors duration-150 hover:bg-muted/50 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\",\n                      index === currentTrackIndex && \"bg-muted\",\n                    )}\n                  >\n                    <img\n                      src={track.cover}\n                      alt={track.title}\n                      width={40}\n                      height={40}\n                      className=\"mr-3 aspect-square rounded object-cover\"\n                    />\n                    <div className=\"flex-1\">\n                      <p\n                        className={cn(\n                          \"font-medium text-sm\",\n                          index === currentTrackIndex && \"text-primary\",\n                        )}\n                      >\n                        {track.title}\n                      </p>\n                      <p className=\"text-muted-foreground text-xs\">\n                        {track.artist}\n                      </p>\n                    </div>\n                    {index === currentTrackIndex && isPlaying ? (\n                      <PauseCircleIcon className=\"ml-3 size-5 text-primary\" />\n                    ) : index === currentTrackIndex && !isPlaying ? (\n                      <PlayCircleIcon className=\"ml-3 size-5 text-muted-foreground\" />\n                    ) : (\n                      <PlayCircleIcon className=\"ml-3 size-5 text-muted-foreground opacity-0 transition-opacity group-hover:opacity-100\" />\n                    )}\n                  </button>\n                ))}\n              </div>\n            </ScrollArea>\n          </div>\n        </div>\n        {/* Hidden Audio Element, we pass the ref to the MediaPlayerAudio */}\n        <MediaPlayerAudio\n          ref={audioRef}\n          src={currentTrack.src}\n          className=\"sr-only\"\n        />\n      </MediaPlayer>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}