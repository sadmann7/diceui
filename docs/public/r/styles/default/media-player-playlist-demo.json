{
  "name": "media-player-playlist-demo",
  "type": "registry:example",
  "dependencies": [
    "@radix-ui/react-slot",
    "lucide-react",
    "media-chrome"
  ],
  "registryDependencies": [
    "button",
    "scroll-area",
    "media-player"
  ],
  "files": [
    {
      "path": "examples/media-player-playlist-demo.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  MediaPlayer,\n  MediaPlayerAudio,\n  MediaPlayerControls,\n  MediaPlayerPlay,\n  MediaPlayerSeek,\n  MediaPlayerTime,\n  MediaPlayerTooltip,\n  MediaPlayerVolume,\n} from \"@/registry/default/ui/media-player\";\nimport {\n  ListMusicIcon,\n  PauseCircleIcon,\n  PlayCircleIcon,\n  SkipBackIcon,\n  SkipForwardIcon,\n} from \"lucide-react\";\nimport * as React from \"react\";\n\ninterface Track {\n  id: string;\n  title: string;\n  artist: string;\n  src: string;\n  cover: string;\n}\n\nconst tracks: Track[] = [\n  {\n    id: \"1\",\n    title: \"Medieval: Battle\",\n    artist: \"RandomMind\",\n    src: \"https://opengameart.org/sites/default/files/battle.mp3\",\n    cover: \"https://picsum.photos/seed/battle/200/200\",\n  },\n  {\n    id: \"2\",\n    title: \"City Lights\",\n    artist: \"The Lemming Shepherds\",\n    src: \"https://www.dropbox.com/s/mvvwaw1msplnteq/City%20Lights%20-%20The%20Lemming%20Shepherds.mp3?raw=1\",\n    cover: \"https://picsum.photos/seed/citylights/200/200\",\n  },\n  {\n    id: \"3\",\n    title: \"The Cradle of Your Soul\",\n    artist: \"Angelwing\",\n    src: \"https://www.dropbox.com/s/ayf4cwdytqafs70/The%20Calling%20%20-%20Angelwing.mp3?raw=1\",\n    cover: \"https://picsum.photos/seed/calling/200/200\",\n  },\n  {\n    id: \"4\",\n    title: \"Happy Days\",\n    artist: \"FSM Team\",\n    src: \"https://www.free-stock-music.com/music/fsm-team-happy-days.mp3\",\n    cover: \"https://picsum.photos/seed/happydays/200/200\",\n  },\n];\n\nexport default function MediaPlayerPlaylistDemo() {\n  const [currentTrackIndex, setCurrentTrackIndex] = React.useState(0);\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const audioRef = React.useRef<HTMLAudioElement | null>(null);\n\n  const currentTrack = React.useMemo(\n    () => tracks[currentTrackIndex],\n    [currentTrackIndex],\n  );\n\n  const onPlay = React.useCallback(() => {\n    setIsPlaying(true);\n  }, []);\n\n  const onPause = React.useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n\n  const onEnded = React.useCallback(() => {\n    onNextTrack();\n  }, []);\n\n  const onPlayTrack = React.useCallback((index: number) => {\n    const trackToPlay = tracks[index];\n    if (!trackToPlay) {\n      console.error({ error: `Track at index ${index} not found.` });\n      return;\n    }\n    setCurrentTrackIndex(index);\n    setIsPlaying(true);\n    if (audioRef.current) {\n      audioRef.current.src = trackToPlay.src;\n      audioRef.current.load();\n      audioRef.current.play().catch((error) => console.error({ error }));\n    }\n  }, []);\n\n  const onTogglePlayPauseTrack = (index: number) => {\n    if (index === currentTrackIndex) {\n      if (isPlaying) {\n        audioRef.current?.pause();\n      } else {\n        audioRef.current?.play().catch((error) => console.error({ error }));\n      }\n      setIsPlaying(!isPlaying);\n    } else {\n      onPlayTrack(index);\n    }\n  };\n\n  const onNextTrack = React.useCallback(() => {\n    const nextIndex = (currentTrackIndex + 1) % tracks.length;\n    onPlayTrack(nextIndex);\n  }, [currentTrackIndex, onPlayTrack]);\n\n  const onPreviousTrack = React.useCallback(() => {\n    const prevIndex = (currentTrackIndex - 1 + tracks.length) % tracks.length;\n    onPlayTrack(prevIndex);\n  }, [currentTrackIndex, onPlayTrack]);\n\n  React.useEffect(() => {\n    if (audioRef.current && currentTrack) {\n      audioRef.current.src = currentTrack.src;\n      audioRef.current.load();\n      if (isPlaying) {\n        audioRef.current.play().catch((error) => console.error({ error }));\n      }\n    }\n  }, [currentTrack?.src, isPlaying, currentTrack]);\n\n  if (!currentTrack) {\n    return <div>Loading track...</div>;\n  }\n\n  return (\n    <MediaPlayer\n      onPlay={onPlay}\n      onPause={onPause}\n      onEnded={onEnded}\n      className=\"w-full max-w-2xl overflow-hidden rounded-lg border bg-background shadow-lg\"\n    >\n      <MediaPlayerAudio\n        ref={audioRef}\n        src={currentTrack.src}\n        className=\"sr-only\"\n      />\n      <div className=\"flex w-full flex-col items-center gap-4 py-4 md:items-start\">\n        <div className=\"w-full overflow-hidden rounded-md rounded-b-none\">\n          <img\n            src={currentTrack.cover}\n            alt={currentTrack.title}\n            width={300}\n            height={300}\n            className=\"aspect-square w-full object-cover transition-all hover:scale-105\"\n          />\n        </div>\n        <div className=\"flex flex-col gap-1 px-4\">\n          <h2 className=\"font-semibold text-2xl text-foreground tracking-tight\">\n            {currentTrack.title}\n          </h2>\n          <p className=\"text-muted-foreground text-sm\">{currentTrack.artist}</p>\n        </div>\n        <div className=\"w-full border-t\">\n          <div className=\"flex items-center justify-between border-border border-b p-4\">\n            <div className=\"flex items-center gap-2\">\n              <h3 className=\"font-medium text-lg tracking-tight\">Playlist</h3>\n              <ListMusicIcon className=\"size-4\" />\n            </div>\n            <span className=\"text-muted-foreground text-sm\">{`${currentTrackIndex + 1} / ${tracks.length}`}</span>\n          </div>\n          <ScrollArea className=\"flex max-h-[240px] flex-col\">\n            {tracks.map((track, index) => (\n              <button\n                key={track.id}\n                onClick={() => onTogglePlayPauseTrack(index)}\n                className={cn(\n                  \"group flex w-full items-center gap-4 p-4 text-left transition-colors duration-150 hover:bg-muted/50 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\",\n                  index === currentTrackIndex && \"bg-muted\",\n                )}\n              >\n                <img\n                  src={track.cover}\n                  alt={track.title}\n                  width={48}\n                  height={48}\n                  className=\"aspect-square rounded object-cover\"\n                />\n                <div className=\"flex-1\">\n                  <p\n                    className={cn(\n                      \"font-medium text-base leading-tight\",\n                      index === currentTrackIndex && \"text-primary\",\n                    )}\n                  >\n                    {track.title}\n                  </p>\n                  <p className=\"text-muted-foreground text-sm\">\n                    {track.artist}\n                  </p>\n                </div>\n                {index === currentTrackIndex && isPlaying ? (\n                  <PauseCircleIcon className=\"size-6 text-primary\" />\n                ) : index === currentTrackIndex && !isPlaying ? (\n                  <PlayCircleIcon className=\"size-6 text-muted-foreground\" />\n                ) : (\n                  <PlayCircleIcon className=\"size-6 text-muted-foreground opacity-0 transition-opacity group-hover:opacity-100\" />\n                )}\n              </button>\n            ))}\n          </ScrollArea>\n        </div>\n        <MediaPlayerControls className=\"static flex w-full flex-col gap-2.5\">\n          <MediaPlayerSeek />\n          <div className=\"flex w-full items-center justify-center gap-2\">\n            <MediaPlayerTooltip tooltip=\"Previous track\">\n              <Button\n                aria-label=\"Previous track\"\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"size-8\"\n                onClick={onPreviousTrack}\n              >\n                <SkipBackIcon />\n              </Button>\n            </MediaPlayerTooltip>\n            <MediaPlayerPlay />\n            <MediaPlayerTooltip tooltip=\"Next track\">\n              <Button\n                aria-label=\"Next track\"\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"size-8\"\n                onClick={onNextTrack}\n              >\n                <SkipForwardIcon />\n              </Button>\n            </MediaPlayerTooltip>\n            <MediaPlayerTime variant=\"progress\" />\n            <MediaPlayerVolume className=\"ml-auto\" />\n          </div>\n        </MediaPlayerControls>\n      </div>\n    </MediaPlayer>\n  );\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}