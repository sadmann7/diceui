{
  "name": "data-table-demo",
  "type": "registry:example",
  "dependencies": [
    "@diceui/data-table",
    "lucide-react"
  ],
  "registryDependencies": [
    "data-table"
  ],
  "files": [
    {
      "path": "examples/data-table-demo.tsx",
      "content": "\"use client\";\r\n\r\nimport { DataTable } from \"@/components/data-table\";\r\nimport { DataTableColumnHeader } from \"@/components/data-table-column-header\";\r\nimport { DataTableToolbar } from \"@/components/data-table-toolbar\";\r\n\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { useDataTable } from \"@/hooks/use-data-table\";\r\n\r\nimport type { Column, ColumnDef } from \"@tanstack/react-table\";\r\nimport {\r\n  CheckCircle,\r\n  CheckCircle2,\r\n  DollarSign,\r\n  MoreHorizontal,\r\n  Text,\r\n  XCircle,\r\n} from \"lucide-react\";\r\nimport { parseAsArrayOf, parseAsString, useQueryState } from \"nuqs\";\r\nimport * as React from \"react\";\r\n\r\ninterface Project {\r\n  id: string;\r\n  title: string;\r\n  status: \"active\" | \"inactive\";\r\n  budget: number;\r\n}\r\n\r\nconst data: Project[] = [\r\n  {\r\n    id: \"1\",\r\n    title: \"Project Alpha\",\r\n    status: \"active\",\r\n    budget: 50000,\r\n  },\r\n  {\r\n    id: \"2\",\r\n    title: \"Project Beta\",\r\n    status: \"inactive\",\r\n    budget: 75000,\r\n  },\r\n  {\r\n    id: \"3\",\r\n    title: \"Project Gamma\",\r\n    status: \"active\",\r\n    budget: 25000,\r\n  },\r\n  {\r\n    id: \"4\",\r\n    title: \"Project Delta\",\r\n    status: \"active\",\r\n    budget: 100000,\r\n  },\r\n];\r\n\r\nexport default function DataTableDemo() {\r\n  const [title] = useQueryState(\"title\", parseAsString.withDefault(\"\"));\r\n  const [status] = useQueryState(\r\n    \"status\",\r\n    parseAsArrayOf(parseAsString).withDefault([]),\r\n  );\r\n\r\n  // Ideally we would filter the data server-side, but for the sake of this example, we'll filter the data client-side\r\n  const filteredData = React.useMemo(() => {\r\n    return data.filter((project) => {\r\n      const matchesTitle =\r\n        title === \"\" ||\r\n        project.title.toLowerCase().includes(title.toLowerCase());\r\n      const matchesStatus =\r\n        status.length === 0 || status.includes(project.status);\r\n\r\n      return matchesTitle && matchesStatus;\r\n    });\r\n  }, [title, status]);\r\n\r\n  const columns = React.useMemo<ColumnDef<Project>[]>(\r\n    () => [\r\n      {\r\n        id: \"select\",\r\n        header: ({ table }) => (\r\n          <Checkbox\r\n            checked={\r\n              table.getIsAllPageRowsSelected() ||\r\n              (table.getIsSomePageRowsSelected() && \"indeterminate\")\r\n            }\r\n            onCheckedChange={(value) =>\r\n              table.toggleAllPageRowsSelected(!!value)\r\n            }\r\n            aria-label=\"Select all\"\r\n          />\r\n        ),\r\n        cell: ({ row }) => (\r\n          <Checkbox\r\n            checked={row.getIsSelected()}\r\n            onCheckedChange={(value) => row.toggleSelected(!!value)}\r\n            aria-label=\"Select row\"\r\n          />\r\n        ),\r\n        size: 32,\r\n        enableSorting: false,\r\n        enableHiding: false,\r\n      },\r\n      {\r\n        id: \"title\",\r\n        accessorKey: \"title\",\r\n        header: ({ column }: { column: Column<Project, unknown> }) => (\r\n          <DataTableColumnHeader column={column} title=\"Title\" />\r\n        ),\r\n        cell: ({ cell }) => <div>{cell.getValue<Project[\"title\"]>()}</div>,\r\n        meta: {\r\n          label: \"Title\",\r\n          placeholder: \"Search titles...\",\r\n          variant: \"text\",\r\n          icon: Text,\r\n        },\r\n        enableColumnFilter: true,\r\n      },\r\n      {\r\n        id: \"status\",\r\n        accessorKey: \"status\",\r\n        header: ({ column }: { column: Column<Project, unknown> }) => (\r\n          <DataTableColumnHeader column={column} title=\"Status\" />\r\n        ),\r\n        cell: ({ cell }) => {\r\n          const status = cell.getValue<Project[\"status\"]>();\r\n          const Icon = status === \"active\" ? CheckCircle2 : XCircle;\r\n\r\n          return (\r\n            <Badge variant=\"outline\" className=\"capitalize\">\r\n              <Icon />\r\n              {status}\r\n            </Badge>\r\n          );\r\n        },\r\n        meta: {\r\n          label: \"Status\",\r\n          variant: \"multiSelect\",\r\n          options: [\r\n            { label: \"Active\", value: \"active\", icon: CheckCircle },\r\n            { label: \"Inactive\", value: \"inactive\", icon: XCircle },\r\n          ],\r\n        },\r\n        enableColumnFilter: true,\r\n      },\r\n      {\r\n        id: \"budget\",\r\n        accessorKey: \"budget\",\r\n        header: ({ column }: { column: Column<Project, unknown> }) => (\r\n          <DataTableColumnHeader column={column} title=\"Budget\" />\r\n        ),\r\n        cell: ({ cell }) => {\r\n          const budget = cell.getValue<Project[\"budget\"]>();\r\n\r\n          return (\r\n            <div className=\"flex items-center gap-1\">\r\n              <DollarSign className=\"size-4\" />\r\n              {budget.toLocaleString()}\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        id: \"actions\",\r\n        cell: function Cell() {\r\n          return (\r\n            <DropdownMenu>\r\n              <DropdownMenuTrigger asChild>\r\n                <Button variant=\"ghost\" size=\"icon\">\r\n                  <MoreHorizontal className=\"h-4 w-4\" />\r\n                  <span className=\"sr-only\">Open menu</span>\r\n                </Button>\r\n              </DropdownMenuTrigger>\r\n              <DropdownMenuContent align=\"end\">\r\n                <DropdownMenuItem>Edit</DropdownMenuItem>\r\n                <DropdownMenuItem variant=\"destructive\">\r\n                  Delete\r\n                </DropdownMenuItem>\r\n              </DropdownMenuContent>\r\n            </DropdownMenu>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n    [],\r\n  );\r\n\r\n  const { table } = useDataTable({\r\n    data: filteredData,\r\n    columns,\r\n    pageCount: 1,\r\n    initialState: {\r\n      sorting: [{ id: \"title\", desc: true }],\r\n      columnPinning: { right: [\"actions\"] },\r\n    },\r\n    getRowId: (row) => row.id,\r\n  });\r\n\r\n  return (\r\n    <div data-table>\r\n      <DataTable table={table}>\r\n        <DataTableToolbar table={table} />\r\n      </DataTable>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}