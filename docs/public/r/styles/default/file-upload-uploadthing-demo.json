{
  "name": "file-upload-uploadthing-demo",
  "type": "registry:example",
  "dependencies": [
    "@radix-ui/react-slot",
    "lucide-react",
    "@uploadthing/react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "examples/file-upload-uploadthing-demo.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { uploadFiles } from \"@/lib/uploadthing\";\nimport {\n  FileUpload,\n  FileUploadDropzone,\n  FileUploadItem,\n  FileUploadItemDelete,\n  FileUploadItemMetadata,\n  FileUploadItemPreview,\n  FileUploadItemProgress,\n  FileUploadList,\n  FileUploadTrigger,\n} from \"@/registry/default/ui/file-upload\";\nimport type { UploadedFile } from \"@/types\";\nimport { Upload, X } from \"lucide-react\";\nimport * as React from \"react\";\nimport { toast } from \"sonner\";\n\nexport default function FileUploadUploadThingDemo() {\n  const [uploadedFiles, setUploadedFiles] = React.useState<UploadedFile[]>([]);\n\n  const onUpload = React.useCallback(\n    async (\n      files: File[],\n      {\n        onProgress,\n      }: {\n        onProgress: (file: File, progress: number) => void;\n      },\n    ) => {\n      try {\n        const res = await uploadFiles(\"imageUploader\", {\n          files,\n          onUploadProgress: ({ file, progress }) => {\n            onProgress(file, progress);\n          },\n        });\n\n        setUploadedFiles((prev) => (prev ? [...prev, ...res] : res));\n      } catch (error) {\n        toast.error(\n          error instanceof Error ? error.message : \"An unknown error occurred\",\n        );\n      }\n    },\n    [],\n  );\n\n  const convertedFiles = React.useMemo(() => {\n    return uploadedFiles.map((file) => {\n      return {\n        name: file.name,\n        size: file.size,\n        type: file.type ?? \"application/octet-stream\",\n        lastModified: file.lastModified ?? Date.now(),\n        slice: () => new Blob(),\n        arrayBuffer: () => Promise.resolve(new ArrayBuffer(0)),\n        text: () => Promise.resolve(\"\"),\n        stream: () => new ReadableStream(),\n        webkitRelativePath: \"\",\n        bytes: () => Promise.resolve(new Uint8Array()),\n      } satisfies File;\n    });\n  }, [uploadedFiles]);\n\n  return (\n    <FileUpload\n      className=\"w-full max-w-md\"\n      accept=\"image/*\"\n      maxFiles={2}\n      maxSize={4 * 1024 * 1024}\n      onUpload={onUpload}\n      multiple\n    >\n      <FileUploadDropzone>\n        <div className=\"flex flex-col items-center gap-1\">\n          <div className=\"flex items-center justify-center rounded-full border p-2.5\">\n            <Upload className=\"size-6 text-muted-foreground\" />\n          </div>\n          <p className=\"font-medium text-sm\">Drag & drop images here</p>\n          <p className=\"text-muted-foreground text-xs\">\n            Or click to browse (max 2 files, up to 4MB each)\n          </p>\n        </div>\n        <FileUploadTrigger asChild>\n          <Button variant=\"outline\" size=\"sm\" className=\"mt-2 w-fit\">\n            Browse files\n          </Button>\n        </FileUploadTrigger>\n      </FileUploadDropzone>\n      <FileUploadList>\n        {convertedFiles.map((file, index) => (\n          <FileUploadItem key={index} value={file}>\n            <div className=\"flex w-full items-center gap-2\">\n              <FileUploadItemPreview />\n              <FileUploadItemMetadata />\n              <FileUploadItemDelete asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"size-7\">\n                  <X />\n                </Button>\n              </FileUploadItemDelete>\n            </div>\n            <FileUploadItemProgress />\n          </FileUploadItem>\n        ))}\n      </FileUploadList>\n    </FileUpload>\n  );\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}