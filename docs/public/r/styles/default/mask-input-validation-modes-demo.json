{
  "name": "mask-input-validation-modes-demo",
  "type": "registry:example",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "registryDependencies": [
    "badge",
    "card",
    "label"
  ],
  "files": [
    {
      "path": "examples/mask-input-validation-modes-demo.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { MaskInput } from \"@/registry/default/ui/mask-input\";\n\nexport default function MaskInputValidationModesDemo() {\n  const [validationStates, setValidationStates] = React.useState({\n    onChange: { isValid: true, message: \"\" },\n    onBlur: { isValid: true, message: \"\" },\n    onTouched: { isValid: true, message: \"\" },\n    onSubmit: { isValid: true, message: \"\" },\n    all: { isValid: true, message: \"\" },\n  });\n\n  const [values, setValues] = React.useState({\n    onChange: \"\",\n    onBlur: \"\",\n    onTouched: \"\",\n    onSubmit: \"\",\n    all: \"\",\n  });\n\n  const handleValidation =\n    (mode: keyof typeof validationStates) =>\n    (isValid: boolean, unmaskedValue: string) => {\n      const message = isValid\n        ? `✓ Valid phone number (${unmaskedValue.length}/10 digits)`\n        : `✗ Invalid phone number (${unmaskedValue.length}/10 digits)`;\n\n      setValidationStates((prev) => ({\n        ...prev,\n        [mode]: { isValid, message },\n      }));\n    };\n\n  const handleValueChange =\n    (mode: keyof typeof values) =>\n    (_maskedValue: string, unmaskedValue: string) => {\n      setValues((prev) => ({\n        ...prev,\n        [mode]: unmaskedValue,\n      }));\n    };\n\n  const modes = [\n    {\n      key: \"onChange\" as const,\n      title: \"onChange (Default)\",\n      description: \"Validates on every keystroke - immediate feedback\",\n      validationMode: \"onChange\" as const,\n    },\n    {\n      key: \"onBlur\" as const,\n      title: \"onBlur\",\n      description: \"Validates only when field loses focus - less intrusive\",\n      validationMode: \"onBlur\" as const,\n    },\n    {\n      key: \"onTouched\" as const,\n      title: \"onTouched\",\n      description:\n        \"Validates on first blur, then on every change - balanced approach\",\n      validationMode: \"onTouched\" as const,\n    },\n    {\n      key: \"onSubmit\" as const,\n      title: \"onSubmit\",\n      description:\n        \"No automatic validation - only validates on form submission\",\n      validationMode: \"onSubmit\" as const,\n    },\n    {\n      key: \"all\" as const,\n      title: \"all\",\n      description:\n        \"Validates on both change and blur events - maximum feedback\",\n      validationMode: \"all\" as const,\n    },\n  ];\n\n  return (\n    <div className=\"w-full max-w-4xl space-y-6\">\n      <div className=\"space-y-2 text-center\">\n        <h3 className=\"font-semibold text-lg\">Validation Mode Comparison</h3>\n        <p className=\"text-muted-foreground text-sm\">\n          Try typing in each field to see how different validation modes behave\n        </p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {modes.map((mode) => (\n          <Card key={mode.key} className=\"relative\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"font-medium text-sm\">\n                {mode.title}\n              </CardTitle>\n              <CardDescription className=\"text-xs\">\n                {mode.description}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"space-y-2\">\n                <Label htmlFor={`phone-${mode.key}`} className=\"text-xs\">\n                  Phone Number\n                </Label>\n                <MaskInput\n                  id={`phone-${mode.key}`}\n                  mask=\"phone\"\n                  validationMode={mode.validationMode}\n                  value={values[mode.key]}\n                  onValueChange={handleValueChange(mode.key)}\n                  onValidate={handleValidation(mode.key)}\n                  placeholder=\"(555) 123-4567\"\n                  invalid={!validationStates[mode.key].isValid}\n                  className=\"text-sm\"\n                />\n              </div>\n\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  <Badge\n                    variant={\n                      validationStates[mode.key].isValid\n                        ? \"default\"\n                        : \"destructive\"\n                    }\n                    className=\"text-xs\"\n                  >\n                    {validationStates[mode.key].isValid ? \"Valid\" : \"Invalid\"}\n                  </Badge>\n                </div>\n                <p className=\"min-h-[2.5rem] text-muted-foreground text-xs leading-tight\">\n                  {validationStates[mode.key].message ||\n                    \"Start typing to see validation...\"}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"mt-8 rounded-lg bg-muted/50 p-4\">\n        <h4 className=\"mb-2 font-medium text-sm\">Usage Examples</h4>\n        <div className=\"space-y-2 text-muted-foreground text-xs\">\n          <div>\n            <strong>onChange:</strong> Best for real-time validation, form\n            builders\n          </div>\n          <div>\n            <strong>onBlur:</strong> Good for less intrusive UX, optional fields\n          </div>\n          <div>\n            <strong>onTouched:</strong> Balanced approach, similar to\n            react-hook-form default\n          </div>\n          <div>\n            <strong>onSubmit:</strong> Minimal validation, validate only when\n            needed\n          </div>\n          <div>\n            <strong>all:</strong> Maximum validation coverage, critical fields\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}