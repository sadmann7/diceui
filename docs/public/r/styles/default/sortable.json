{
  "name": "sortable",
  "type": "registry:ui",
  "dependencies": [
    "@dnd-kit/core",
    "@dnd-kit/modifiers",
    "@dnd-kit/sortable",
    "@dnd-kit/utilities",
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/sortable.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  type Announcements,\r\n  DndContext,\r\n  type DndContextProps,\r\n  type DragEndEvent,\r\n  DragOverlay,\r\n  type DragStartEvent,\r\n  type DraggableAttributes,\r\n  type DraggableSyntheticListeners,\r\n  type DropAnimation,\r\n  KeyboardSensor,\r\n  MouseSensor,\r\n  type ScreenReaderInstructions,\r\n  TouchSensor,\r\n  type UniqueIdentifier,\r\n  closestCenter,\r\n  closestCorners,\r\n  defaultDropAnimationSideEffects,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport {\r\n  restrictToHorizontalAxis,\r\n  restrictToParentElement,\r\n  restrictToVerticalAxis,\r\n} from \"@dnd-kit/modifiers\";\r\nimport {\r\n  SortableContext,\r\n  type SortableContextProps,\r\n  arrayMove,\r\n  horizontalListSortingStrategy,\r\n  sortableKeyboardCoordinates,\r\n  useSortable,\r\n  verticalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport * as React from \"react\";\r\n\r\nimport { useComposedRefs } from \"@/lib/composition\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nconst orientationConfig = {\r\n  vertical: {\r\n    modifiers: [restrictToVerticalAxis, restrictToParentElement],\r\n    strategy: verticalListSortingStrategy,\r\n    collisionDetection: closestCenter,\r\n  },\r\n  horizontal: {\r\n    modifiers: [restrictToHorizontalAxis, restrictToParentElement],\r\n    strategy: horizontalListSortingStrategy,\r\n    collisionDetection: closestCenter,\r\n  },\r\n  mixed: {\r\n    modifiers: [restrictToParentElement],\r\n    strategy: undefined,\r\n    collisionDetection: closestCorners,\r\n  },\r\n};\r\n\r\nconst ROOT_NAME = \"Sortable\";\r\nconst CONTENT_NAME = \"SortableContent\";\r\nconst ITEM_NAME = \"SortableItem\";\r\nconst ITEM_HANDLE_NAME = \"SortableItemHandle\";\r\nconst OVERLAY_NAME = \"SortableOverlay\";\r\n\r\nconst SORTABLE_ERRORS = {\r\n  [ROOT_NAME]: `\\`${ROOT_NAME}\\` components must be within \\`${ROOT_NAME}\\``,\r\n  [CONTENT_NAME]: `\\`${CONTENT_NAME}\\` must be within \\`${ROOT_NAME}\\``,\r\n  [ITEM_NAME]: `\\`${ITEM_NAME}\\` must be within \\`${CONTENT_NAME}\\``,\r\n  [ITEM_HANDLE_NAME]: `\\`${ITEM_HANDLE_NAME}\\` must be within \\`${ITEM_NAME}\\``,\r\n  [OVERLAY_NAME]: `\\`${OVERLAY_NAME}\\` must be within \\`${ROOT_NAME}\\``,\r\n} as const;\r\n\r\ninterface SortableRootContextValue<T> {\r\n  id: string;\r\n  items: UniqueIdentifier[];\r\n  modifiers: DndContextProps[\"modifiers\"];\r\n  strategy: SortableContextProps[\"strategy\"];\r\n  activeId: UniqueIdentifier | null;\r\n  setActiveId: (id: UniqueIdentifier | null) => void;\r\n  getItemValue: (item: T) => UniqueIdentifier;\r\n  flatCursor: boolean;\r\n}\r\n\r\nconst SortableRootContext =\r\n  React.createContext<SortableRootContextValue<unknown> | null>(null);\r\nSortableRootContext.displayName = ROOT_NAME;\r\n\r\nfunction useSortableContext(name: keyof typeof SORTABLE_ERRORS) {\r\n  const context = React.useContext(SortableRootContext);\r\n  if (!context) {\r\n    throw new Error(SORTABLE_ERRORS[name]);\r\n  }\r\n  return context;\r\n}\r\n\r\ninterface GetItemValue<T> {\r\n  /**\r\n   * Callback that returns a unique identifier for each sortable item. Required for array of objects.\r\n   * @example getItemValue={(item) => item.id}\r\n   */\r\n  getItemValue: (item: T) => UniqueIdentifier;\r\n}\r\n\r\ntype SortableProps<T> = DndContextProps & {\r\n  value: T[];\r\n  onValueChange?: (items: T[]) => void;\r\n  onMove?: (\r\n    event: DragEndEvent & { activeIndex: number; overIndex: number },\r\n  ) => void;\r\n  strategy?: SortableContextProps[\"strategy\"];\r\n  orientation?: \"vertical\" | \"horizontal\" | \"mixed\";\r\n  flatCursor?: boolean;\r\n} & (T extends object ? GetItemValue<T> : Partial<GetItemValue<T>>);\r\n\r\nfunction Sortable<T>(props: SortableProps<T>) {\r\n  const {\r\n    value,\r\n    onValueChange,\r\n    collisionDetection,\r\n    modifiers,\r\n    strategy,\r\n    onMove,\r\n    orientation = \"vertical\",\r\n    flatCursor = false,\r\n    getItemValue: getItemValueProp,\r\n    accessibility,\r\n    ...sortableProps\r\n  } = props;\r\n\r\n  const id = React.useId();\r\n  const [activeId, setActiveId] = React.useState<UniqueIdentifier | null>(null);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor),\r\n    useSensor(TouchSensor),\r\n    useSensor(KeyboardSensor, {\r\n      coordinateGetter: sortableKeyboardCoordinates,\r\n    }),\r\n  );\r\n  const config = React.useMemo(\r\n    () => orientationConfig[orientation],\r\n    [orientation],\r\n  );\r\n\r\n  const getItemValue = React.useCallback(\r\n    (item: T): UniqueIdentifier => {\r\n      if (typeof item === \"object\" && !getItemValueProp) {\r\n        throw new Error(\"getItemValue is required when using array of objects\");\r\n      }\r\n      return getItemValueProp\r\n        ? getItemValueProp(item)\r\n        : (item as UniqueIdentifier);\r\n    },\r\n    [getItemValueProp],\r\n  );\r\n\r\n  const items = React.useMemo(() => {\r\n    return value.map((item) => getItemValue(item));\r\n  }, [value, getItemValue]);\r\n\r\n  const onDragStart = React.useCallback(\r\n    (event: DragStartEvent) => {\r\n      sortableProps.onDragStart?.(event);\r\n\r\n      if (event.activatorEvent.defaultPrevented) return;\r\n\r\n      setActiveId(event.active.id);\r\n    },\r\n    [sortableProps.onDragStart],\r\n  );\r\n\r\n  const onDragEnd = React.useCallback(\r\n    (event: DragEndEvent) => {\r\n      sortableProps.onDragEnd?.(event);\r\n\r\n      if (event.activatorEvent.defaultPrevented) return;\r\n\r\n      const { active, over } = event;\r\n      if (over && active.id !== over?.id) {\r\n        const activeIndex = value.findIndex(\r\n          (item) => getItemValue(item) === active.id,\r\n        );\r\n        const overIndex = value.findIndex(\r\n          (item) => getItemValue(item) === over.id,\r\n        );\r\n\r\n        if (onMove) {\r\n          onMove({ ...event, activeIndex, overIndex });\r\n        } else {\r\n          onValueChange?.(arrayMove(value, activeIndex, overIndex));\r\n        }\r\n      }\r\n      setActiveId(null);\r\n    },\r\n    [value, onValueChange, onMove, getItemValue, sortableProps.onDragEnd],\r\n  );\r\n\r\n  const onDragCancel = React.useCallback(\r\n    (event: DragEndEvent) => {\r\n      sortableProps.onDragCancel?.(event);\r\n\r\n      if (event.activatorEvent.defaultPrevented) return;\r\n\r\n      setActiveId(null);\r\n    },\r\n    [sortableProps.onDragCancel],\r\n  );\r\n\r\n  const announcements: Announcements = React.useMemo(\r\n    () => ({\r\n      onDragStart({ active }) {\r\n        const activeValue = active.id.toString();\r\n        return `Grabbed sortable item \"${activeValue}\". Current position is ${active.data.current?.sortable.index + 1} of ${value.length}. Use arrow keys to move, space to drop.`;\r\n      },\r\n      onDragOver({ active, over }) {\r\n        if (over) {\r\n          const overIndex = over.data.current?.sortable.index ?? 0;\r\n          const activeIndex = active.data.current?.sortable.index ?? 0;\r\n          const moveDirection = overIndex > activeIndex ? \"down\" : \"up\";\r\n          const activeValue = active.id.toString();\r\n          return `Sortable item \"${activeValue}\" moved ${moveDirection} to position ${overIndex + 1} of ${value.length}.`;\r\n        }\r\n        return \"Sortable item is no longer over a droppable area. Press escape to cancel.\";\r\n      },\r\n      onDragEnd({ active, over }) {\r\n        const activeValue = active.id.toString();\r\n        if (over) {\r\n          const overIndex = over.data.current?.sortable.index ?? 0;\r\n          return `Sortable item \"${activeValue}\" dropped at position ${overIndex + 1} of ${value.length}.`;\r\n        }\r\n        return `Sortable item \"${activeValue}\" dropped. No changes were made.`;\r\n      },\r\n      onDragCancel({ active }) {\r\n        const activeIndex = active.data.current?.sortable.index ?? 0;\r\n        const activeValue = active.id.toString();\r\n        return `Sorting cancelled. Sortable item \"${activeValue}\" returned to position ${activeIndex + 1} of ${value.length}.`;\r\n      },\r\n      onDragMove({ active, over }) {\r\n        if (over) {\r\n          const overIndex = over.data.current?.sortable.index ?? 0;\r\n          const activeIndex = active.data.current?.sortable.index ?? 0;\r\n          const moveDirection = overIndex > activeIndex ? \"down\" : \"up\";\r\n          const activeValue = active.id.toString();\r\n          return `Sortable item \"${activeValue}\" is moving ${moveDirection} to position ${overIndex + 1} of ${value.length}.`;\r\n        }\r\n        return \"Sortable item is no longer over a droppable area. Press escape to cancel.\";\r\n      },\r\n    }),\r\n    [value],\r\n  );\r\n\r\n  const screenReaderInstructions: ScreenReaderInstructions = React.useMemo(\r\n    () => ({\r\n      draggable: `\r\n        To pick up a sortable item, press space or enter.\r\n        While dragging, use the ${orientation === \"vertical\" ? \"up and down\" : orientation === \"horizontal\" ? \"left and right\" : \"arrow\"} keys to move the item.\r\n        Press space or enter again to drop the item in its new position, or press escape to cancel.\r\n      `,\r\n    }),\r\n    [orientation],\r\n  );\r\n\r\n  const contextValue = React.useMemo(\r\n    () => ({\r\n      id,\r\n      items,\r\n      modifiers: modifiers ?? config.modifiers,\r\n      strategy: strategy ?? config.strategy,\r\n      activeId,\r\n      setActiveId,\r\n      getItemValue,\r\n      flatCursor,\r\n    }),\r\n    [\r\n      id,\r\n      items,\r\n      modifiers,\r\n      strategy,\r\n      config.modifiers,\r\n      config.strategy,\r\n      activeId,\r\n      getItemValue,\r\n      flatCursor,\r\n    ],\r\n  );\r\n\r\n  return (\r\n    <SortableRootContext.Provider\r\n      value={contextValue as SortableRootContextValue<unknown>}\r\n    >\r\n      <DndContext\r\n        collisionDetection={collisionDetection ?? config.collisionDetection}\r\n        modifiers={modifiers ?? config.modifiers}\r\n        sensors={sensors}\r\n        {...sortableProps}\r\n        id={id}\r\n        onDragStart={onDragStart}\r\n        onDragEnd={onDragEnd}\r\n        onDragCancel={onDragCancel}\r\n        accessibility={{\r\n          announcements,\r\n          screenReaderInstructions,\r\n          ...accessibility,\r\n        }}\r\n      />\r\n    </SortableRootContext.Provider>\r\n  );\r\n}\r\n\r\nconst SortableContentContext = React.createContext<boolean>(false);\r\nSortableContentContext.displayName = CONTENT_NAME;\r\n\r\ninterface SortableContentProps extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  strategy?: SortableContextProps[\"strategy\"];\r\n  children: React.ReactNode;\r\n  asChild?: boolean;\r\n  withoutSlot?: boolean;\r\n}\r\n\r\nconst SortableContent = React.forwardRef<HTMLDivElement, SortableContentProps>(\r\n  (props, forwardedRef) => {\r\n    const {\r\n      strategy: strategyProp,\r\n      asChild,\r\n      withoutSlot,\r\n      children,\r\n      ...contentProps\r\n    } = props;\r\n\r\n    const context = useSortableContext(CONTENT_NAME);\r\n\r\n    const ContentPrimitive = asChild ? Slot : \"div\";\r\n\r\n    return (\r\n      <SortableContentContext.Provider value={true}>\r\n        <SortableContext\r\n          items={context.items}\r\n          strategy={strategyProp ?? context.strategy}\r\n        >\r\n          {withoutSlot ? (\r\n            children\r\n          ) : (\r\n            <ContentPrimitive\r\n              data-slot=\"sortable-content\"\r\n              {...contentProps}\r\n              ref={forwardedRef}\r\n            >\r\n              {children}\r\n            </ContentPrimitive>\r\n          )}\r\n        </SortableContext>\r\n      </SortableContentContext.Provider>\r\n    );\r\n  },\r\n);\r\nSortableContent.displayName = CONTENT_NAME;\r\n\r\ninterface SortableItemContextValue {\r\n  id: string;\r\n  attributes: DraggableAttributes;\r\n  listeners: DraggableSyntheticListeners | undefined;\r\n  setActivatorNodeRef: (node: HTMLElement | null) => void;\r\n  isDragging?: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst SortableItemContext =\r\n  React.createContext<SortableItemContextValue | null>(null);\r\nSortableItemContext.displayName = ITEM_NAME;\r\n\r\ninterface SortableItemProps extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  value: UniqueIdentifier;\r\n  asHandle?: boolean;\r\n  asChild?: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst SortableItem = React.forwardRef<HTMLDivElement, SortableItemProps>(\r\n  (props, forwardedRef) => {\r\n    const {\r\n      value,\r\n      style,\r\n      asHandle,\r\n      asChild,\r\n      disabled,\r\n      className,\r\n      ...itemProps\r\n    } = props;\r\n\r\n    const inSortableContent = React.useContext(SortableContentContext);\r\n    const inSortableOverlay = React.useContext(SortableOverlayContext);\r\n\r\n    if (!inSortableContent && !inSortableOverlay) {\r\n      throw new Error(SORTABLE_ERRORS[ITEM_NAME]);\r\n    }\r\n\r\n    if (value === \"\") {\r\n      throw new Error(`\\`${ITEM_NAME}\\` value cannot be an empty string`);\r\n    }\r\n\r\n    const context = useSortableContext(ITEM_NAME);\r\n    const id = React.useId();\r\n    const {\r\n      attributes,\r\n      listeners,\r\n      setNodeRef,\r\n      setActivatorNodeRef,\r\n      transform,\r\n      transition,\r\n      isDragging,\r\n    } = useSortable({ id: value, disabled });\r\n\r\n    const composedRef = useComposedRefs(forwardedRef, (node) => {\r\n      if (disabled) return;\r\n      setNodeRef(node);\r\n      if (asHandle) setActivatorNodeRef(node);\r\n    });\r\n\r\n    const composedStyle = React.useMemo<React.CSSProperties>(() => {\r\n      return {\r\n        transform: CSS.Translate.toString(transform),\r\n        transition,\r\n        ...style,\r\n      };\r\n    }, [transform, transition, style]);\r\n\r\n    const itemContext = React.useMemo<SortableItemContextValue>(\r\n      () => ({\r\n        id,\r\n        attributes,\r\n        listeners,\r\n        setActivatorNodeRef,\r\n        isDragging,\r\n        disabled,\r\n      }),\r\n      [id, attributes, listeners, setActivatorNodeRef, isDragging, disabled],\r\n    );\r\n\r\n    const ItemPrimitive = asChild ? Slot : \"div\";\r\n\r\n    return (\r\n      <SortableItemContext.Provider value={itemContext}>\r\n        <ItemPrimitive\r\n          id={id}\r\n          data-disabled={disabled}\r\n          data-dragging={isDragging ? \"\" : undefined}\r\n          data-slot=\"sortable-item\"\r\n          {...itemProps}\r\n          {...(asHandle && !disabled ? attributes : {})}\r\n          {...(asHandle && !disabled ? listeners : {})}\r\n          ref={composedRef}\r\n          style={composedStyle}\r\n          className={cn(\r\n            \"focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1\",\r\n            {\r\n              \"touch-none select-none\": asHandle,\r\n              \"cursor-default\": context.flatCursor,\r\n              \"data-dragging:cursor-grabbing\": !context.flatCursor,\r\n              \"cursor-grab\": !isDragging && asHandle && !context.flatCursor,\r\n              \"opacity-50\": isDragging,\r\n              \"pointer-events-none opacity-50\": disabled,\r\n            },\r\n            className,\r\n          )}\r\n        />\r\n      </SortableItemContext.Provider>\r\n    );\r\n  },\r\n);\r\nSortableItem.displayName = ITEM_NAME;\r\n\r\ninterface SortableItemHandleProps\r\n  extends React.ComponentPropsWithoutRef<\"button\"> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst SortableItemHandle = React.forwardRef<\r\n  HTMLButtonElement,\r\n  SortableItemHandleProps\r\n>((props, forwardedRef) => {\r\n  const { asChild, disabled, className, ...itemHandleProps } = props;\r\n\r\n  const itemContext = React.useContext(SortableItemContext);\r\n  if (!itemContext) {\r\n    throw new Error(SORTABLE_ERRORS[ITEM_HANDLE_NAME]);\r\n  }\r\n  const context = useSortableContext(ITEM_HANDLE_NAME);\r\n\r\n  const isDisabled = disabled ?? itemContext.disabled;\r\n\r\n  const composedRef = useComposedRefs(forwardedRef, (node) => {\r\n    if (!isDisabled) return;\r\n    itemContext.setActivatorNodeRef(node);\r\n  });\r\n\r\n  const HandlePrimitive = asChild ? Slot : \"button\";\r\n\r\n  return (\r\n    <HandlePrimitive\r\n      type=\"button\"\r\n      aria-controls={itemContext.id}\r\n      data-disabled={isDisabled}\r\n      data-dragging={itemContext.isDragging ? \"\" : undefined}\r\n      data-slot=\"sortable-item-handle\"\r\n      {...itemHandleProps}\r\n      {...(isDisabled ? {} : itemContext.attributes)}\r\n      {...(isDisabled ? {} : itemContext.listeners)}\r\n      ref={composedRef}\r\n      className={cn(\r\n        \"select-none disabled:pointer-events-none disabled:opacity-50\",\r\n        context.flatCursor\r\n          ? \"cursor-default\"\r\n          : \"cursor-grab data-dragging:cursor-grabbing\",\r\n        className,\r\n      )}\r\n      disabled={isDisabled}\r\n    />\r\n  );\r\n});\r\nSortableItemHandle.displayName = ITEM_HANDLE_NAME;\r\n\r\nconst SortableOverlayContext = React.createContext(false);\r\nSortableOverlayContext.displayName = OVERLAY_NAME;\r\n\r\nconst dropAnimation: DropAnimation = {\r\n  sideEffects: defaultDropAnimationSideEffects({\r\n    styles: {\r\n      active: {\r\n        opacity: \"0.4\",\r\n      },\r\n    },\r\n  }),\r\n};\r\n\r\ninterface SortableOverlayProps\r\n  extends Omit<React.ComponentPropsWithoutRef<typeof DragOverlay>, \"children\"> {\r\n  container?: Element | DocumentFragment | null;\r\n  children?:\r\n    | ((params: { value: UniqueIdentifier }) => React.ReactNode)\r\n    | React.ReactNode;\r\n}\r\n\r\nfunction SortableOverlay(props: SortableOverlayProps) {\r\n  const { container: containerProp, children, ...overlayProps } = props;\r\n\r\n  const context = useSortableContext(OVERLAY_NAME);\r\n\r\n  const [mounted, setMounted] = React.useState(false);\r\n  React.useLayoutEffect(() => setMounted(true), []);\r\n\r\n  const container =\r\n    containerProp ?? (mounted ? globalThis.document?.body : null);\r\n\r\n  if (!container) return null;\r\n\r\n  return ReactDOM.createPortal(\r\n    <DragOverlay\r\n      dropAnimation={dropAnimation}\r\n      modifiers={context.modifiers}\r\n      className={cn(!context.flatCursor && \"cursor-grabbing\")}\r\n      {...overlayProps}\r\n    >\r\n      <SortableOverlayContext.Provider value={true}>\r\n        {context.activeId\r\n          ? typeof children === \"function\"\r\n            ? children({ value: context.activeId })\r\n            : children\r\n          : null}\r\n      </SortableOverlayContext.Provider>\r\n    </DragOverlay>,\r\n    container,\r\n  );\r\n}\r\n\r\nconst Root = Sortable;\r\nconst Content = SortableContent;\r\nconst Item = SortableItem;\r\nconst ItemHandle = SortableItemHandle;\r\nconst Overlay = SortableOverlay;\r\n\r\nexport {\r\n  Root,\r\n  Content,\r\n  Item,\r\n  ItemHandle,\r\n  Overlay,\r\n  //\r\n  Sortable,\r\n  SortableContent,\r\n  SortableItem,\r\n  SortableItemHandle,\r\n  SortableOverlay,\r\n};\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib/composition.ts",
      "content": "import * as React from \"react\";\n\n/**\n * A utility to compose multiple event handlers into a single event handler.\n * Run originalEventHandler first, then ourEventHandler unless prevented.\n */\nfunction composeEventHandlers<E>(\n  originalEventHandler?: (event: E) => void,\n  ourEventHandler?: (event: E) => void,\n  { checkForDefaultPrevented = true } = {},\n) {\n  return function handleEvent(event: E) {\n    originalEventHandler?.(event);\n\n    if (\n      checkForDefaultPrevented === false ||\n      !(event as unknown as Event).defaultPrevented\n    ) {\n      return ourEventHandler?.(event);\n    }\n  };\n}\n\n/**\n * @see https://github.com/radix-ui/primitives/blob/main/packages/react/compose-refs/src/compose-refs.tsx\n */\n\ntype PossibleRef<T> = React.Ref<T> | undefined;\n\n/**\n * Set a given ref to a given value.\n * This utility takes care of different types of refs: callback refs and RefObject(s).\n */\nfunction setRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === \"function\") {\n    return ref(value);\n  }\n\n  if (ref !== null && ref !== undefined) {\n    ref.current = value;\n  }\n}\n\n/**\n * A utility to compose multiple refs together.\n * Accepts callback refs and RefObject(s).\n */\nfunction composeRefs<T>(...refs: PossibleRef<T>[]): React.RefCallback<T> {\n  return (node) => {\n    let hasCleanup = false;\n    const cleanups = refs.map((ref) => {\n      const cleanup = setRef(ref, node);\n      if (!hasCleanup && typeof cleanup === \"function\") {\n        hasCleanup = true;\n      }\n      return cleanup;\n    });\n\n    // React <19 will log an error to the console if a callback ref returns a\n    // value. We don't use ref cleanups internally so this will only happen if a\n    // user's ref callback returns a value, which we only expect if they are\n    // using the cleanup functionality added in React 19.\n    if (hasCleanup) {\n      return () => {\n        for (let i = 0; i < cleanups.length; i++) {\n          const cleanup = cleanups[i];\n          if (typeof cleanup === \"function\") {\n            cleanup();\n          } else {\n            setRef(refs[i], null);\n          }\n        }\n      };\n    }\n  };\n}\n\n/**\n * A custom hook that composes multiple refs.\n * Accepts callback refs and RefObject(s).\n */\nfunction useComposedRefs<T>(...refs: PossibleRef<T>[]): React.RefCallback<T> {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(composeRefs(...refs), refs);\n}\n\nexport { composeEventHandlers, composeRefs, useComposedRefs };\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}